#ifndef RAYLIB_API_GEN_H
#define RAYLIB_API_GEN_H

// DO NOT EDIT THIS FILE, CHANGES WILL BE LOST
// Auto-generated by generate_raylib_api.py from raylib.h
// Timestamp: 2025-07-26 17:21:25

#include "raylib.h"

typedef struct {
    void (*init_window)(int width, int height, const char *title);
    void (*close_window)(void);
    bool (*window_should_close)(void);
    bool (*is_window_ready)(void);
    bool (*is_window_fullscreen)(void);
    bool (*is_window_hidden)(void);
    bool (*is_window_minimized)(void);
    bool (*is_window_maximized)(void);
    bool (*is_window_focused)(void);
    bool (*is_window_resized)(void);
    bool (*is_window_state)(unsigned int flag);
    void (*set_window_state)(unsigned int flags);
    void (*clear_window_state)(unsigned int flags);
    void (*toggle_fullscreen)(void);
    void (*toggle_borderless_windowed)(void);
    void (*maximize_window)(void);
    void (*minimize_window)(void);
    void (*restore_window)(void);
    void (*set_window_icon)(Image image);
    void (*set_window_icons)(Image *images, int count);
    void (*set_window_title)(const char *title);
    void (*set_window_position)(int x, int y);
    void (*set_window_monitor)(int monitor);
    void (*set_window_min_size)(int width, int height);
    void (*set_window_max_size)(int width, int height);
    void (*set_window_size)(int width, int height);
    void (*set_window_opacity)(float opacity);
    void (*set_window_focused)(void);
    void * (*get_window_handle)(void);
    int (*get_screen_width)(void);
    int (*get_screen_height)(void);
    int (*get_render_width)(void);
    int (*get_render_height)(void);
    int (*get_monitor_count)(void);
    int (*get_current_monitor)(void);
    Vector2 (*get_monitor_position)(int monitor);
    int (*get_monitor_width)(int monitor);
    int (*get_monitor_height)(int monitor);
    int (*get_monitor_physical_width)(int monitor);
    int (*get_monitor_physical_height)(int monitor);
    int (*get_monitor_refresh_rate)(int monitor);
    Vector2 (*get_window_position)(void);
    Vector2 (*get_window_scale_dpi)(void);
    const char * (*get_monitor_name)(int monitor);
    void (*set_clipboard_text)(const char *text);
    const char * (*get_clipboard_text)(void);
    Image (*get_clipboard_image)(void);
    void (*enable_event_waiting)(void);
    void (*disable_event_waiting)(void);
    void (*show_cursor)(void);
    void (*hide_cursor)(void);
    bool (*is_cursor_hidden)(void);
    void (*enable_cursor)(void);
    void (*disable_cursor)(void);
    bool (*is_cursor_on_screen)(void);
    void (*clear_background)(Color color);
    void (*begin_drawing)(void);
    void (*end_drawing)(void);
    void (*begin_mode2_d)(Camera2D camera);
    void (*end_mode2_d)(void);
    void (*begin_mode3_d)(Camera3D camera);
    void (*end_mode3_d)(void);
    void (*begin_texture_mode)(RenderTexture2D target);
    void (*end_texture_mode)(void);
    void (*begin_shader_mode)(Shader shader);
    void (*end_shader_mode)(void);
    void (*begin_blend_mode)(int mode);
    void (*end_blend_mode)(void);
    void (*begin_scissor_mode)(int x, int y, int width, int height);
    void (*end_scissor_mode)(void);
    void (*begin_vr_stereo_mode)(VrStereoConfig config);
    void (*end_vr_stereo_mode)(void);
    VrStereoConfig (*load_vr_stereo_config)(VrDeviceInfo device);
    void (*unload_vr_stereo_config)(VrStereoConfig config);
    Shader (*load_shader)(const char *vsFileName, const char *fsFileName);
    Shader (*load_shader_from_memory)(const char *vsCode, const char *fsCode);
    bool (*is_shader_valid)(Shader shader);
    int (*get_shader_location)(Shader shader, const char *uniformName);
    int (*get_shader_location_attrib)(Shader shader, const char *attribName);
    void (*set_shader_value)(Shader shader, int locIndex, const void *value, int uniformType);
    void (*set_shader_value_v)(Shader shader, int locIndex, const void *value, int uniformType, int count);
    void (*set_shader_value_matrix)(Shader shader, int locIndex, Matrix mat);
    void (*set_shader_value_texture)(Shader shader, int locIndex, Texture2D texture);
    void (*unload_shader)(Shader shader);
    Ray (*get_screen_to_world_ray)(Vector2 position, Camera camera);
    Ray (*get_screen_to_world_ray_ex)(Vector2 position, Camera camera, int width, int height);
    Vector2 (*get_world_to_screen)(Vector3 position, Camera camera);
    Vector2 (*get_world_to_screen_ex)(Vector3 position, Camera camera, int width, int height);
    Vector2 (*get_world_to_screen2_d)(Vector2 position, Camera2D camera);
    Vector2 (*get_screen_to_world2_d)(Vector2 position, Camera2D camera);
    Matrix (*get_camera_matrix)(Camera camera);
    Matrix (*get_camera_matrix2_d)(Camera2D camera);
    void (*set_target_fps)(int fps);
    float (*get_frame_time)(void);
    double (*get_time)(void);
    int (*get_fps)(void);
    void (*swap_screen_buffer)(void);
    void (*poll_input_events)(void);
    void (*wait_time)(double seconds);
    void (*set_random_seed)(unsigned int seed);
    int (*get_random_value)(int min, int max);
    int * (*load_random_sequence)(unsigned int count, int min, int max);
    void (*unload_random_sequence)(int *sequence);
    void (*take_screenshot)(const char *fileName);
    void (*set_config_flags)(unsigned int flags);
    void (*open_url)(const char *url);
    void (*trace_log)(int logLevel, const char *text, ...);
    void (*set_trace_log_level)(int logLevel);
    void * (*mem_alloc)(unsigned int size);
    void * (*mem_realloc)(void *ptr, unsigned int size);
    void (*mem_free)(void *ptr);
    void (*set_trace_log_callback)(TraceLogCallback callback);
    void (*set_load_file_data_callback)(LoadFileDataCallback callback);
    void (*set_save_file_data_callback)(SaveFileDataCallback callback);
    void (*set_load_file_text_callback)(LoadFileTextCallback callback);
    void (*set_save_file_text_callback)(SaveFileTextCallback callback);
    unsigned char * (*load_file_data)(const char *fileName, int *dataSize);
    void (*unload_file_data)(unsigned char *data);
    bool (*save_file_data)(const char *fileName, void *data, int dataSize);
    bool (*export_data_as_code)(const unsigned char *data, int dataSize, const char *fileName);
    char * (*load_file_text)(const char *fileName);
    void (*unload_file_text)(char *text);
    bool (*save_file_text)(const char *fileName, char *text);
    bool (*file_exists)(const char *fileName);
    bool (*directory_exists)(const char *dirPath);
    bool (*is_file_extension)(const char *fileName, const char *ext);
    int (*get_file_length)(const char *fileName);
    const char * (*get_file_extension)(const char *fileName);
    const char * (*get_file_name)(const char *filePath);
    const char * (*get_file_name_without_ext)(const char *filePath);
    const char * (*get_directory_path)(const char *filePath);
    const char * (*get_prev_directory_path)(const char *dirPath);
    const char * (*get_working_directory)(void);
    const char * (*get_application_directory)(void);
    int (*make_directory)(const char *dirPath);
    bool (*change_directory)(const char *dir);
    bool (*is_path_file)(const char *path);
    bool (*is_file_name_valid)(const char *fileName);
    FilePathList (*load_directory_files)(const char *dirPath);
    FilePathList (*load_directory_files_ex)(const char *basePath, const char *filter, bool scanSubdirs);
    void (*unload_directory_files)(FilePathList files);
    bool (*is_file_dropped)(void);
    FilePathList (*load_dropped_files)(void);
    void (*unload_dropped_files)(FilePathList files);
    long (*get_file_mod_time)(const char *fileName);
    unsigned char * (*compress_data)(const unsigned char *data, int dataSize, int *compDataSize);
    unsigned char * (*decompress_data)(const unsigned char *compData, int compDataSize, int *dataSize);
    char * (*encode_data_base64)(const unsigned char *data, int dataSize, int *outputSize);
    unsigned char * (*decode_data_base64)(const unsigned char *data, int *outputSize);
    unsigned int (*compute_crc32)(unsigned char *data, int dataSize);
    unsigned int * (*compute_md5)(unsigned char *data, int dataSize);
    unsigned int * (*compute_sha1)(unsigned char *data, int dataSize);
    AutomationEventList (*load_automation_event_list)(const char *fileName);
    void (*unload_automation_event_list)(AutomationEventList list);
    bool (*export_automation_event_list)(AutomationEventList list, const char *fileName);
    void (*set_automation_event_list)(AutomationEventList *list);
    void (*set_automation_event_base_frame)(int frame);
    void (*start_automation_event_recording)(void);
    void (*stop_automation_event_recording)(void);
    void (*play_automation_event)(AutomationEvent event);
    bool (*is_key_pressed)(int key);
    bool (*is_key_pressed_repeat)(int key);
    bool (*is_key_down)(int key);
    bool (*is_key_released)(int key);
    bool (*is_key_up)(int key);
    int (*get_key_pressed)(void);
    int (*get_char_pressed)(void);
    void (*set_exit_key)(int key);
    bool (*is_gamepad_available)(int gamepad);
    const char * (*get_gamepad_name)(int gamepad);
    bool (*is_gamepad_button_pressed)(int gamepad, int button);
    bool (*is_gamepad_button_down)(int gamepad, int button);
    bool (*is_gamepad_button_released)(int gamepad, int button);
    bool (*is_gamepad_button_up)(int gamepad, int button);
    int (*get_gamepad_button_pressed)(void);
    int (*get_gamepad_axis_count)(int gamepad);
    float (*get_gamepad_axis_movement)(int gamepad, int axis);
    int (*set_gamepad_mappings)(const char *mappings);
    void (*set_gamepad_vibration)(int gamepad, float leftMotor, float rightMotor, float duration);
    bool (*is_mouse_button_pressed)(int button);
    bool (*is_mouse_button_down)(int button);
    bool (*is_mouse_button_released)(int button);
    bool (*is_mouse_button_up)(int button);
    int (*get_mouse_x)(void);
    int (*get_mouse_y)(void);
    Vector2 (*get_mouse_position)(void);
    Vector2 (*get_mouse_delta)(void);
    void (*set_mouse_position)(int x, int y);
    void (*set_mouse_offset)(int offsetX, int offsetY);
    void (*set_mouse_scale)(float scaleX, float scaleY);
    float (*get_mouse_wheel_move)(void);
    Vector2 (*get_mouse_wheel_move_v)(void);
    void (*set_mouse_cursor)(int cursor);
    int (*get_touch_x)(void);
    int (*get_touch_y)(void);
    Vector2 (*get_touch_position)(int index);
    int (*get_touch_point_id)(int index);
    int (*get_touch_point_count)(void);
    void (*set_gestures_enabled)(unsigned int flags);
    bool (*is_gesture_detected)(unsigned int gesture);
    int (*get_gesture_detected)(void);
    float (*get_gesture_hold_duration)(void);
    Vector2 (*get_gesture_drag_vector)(void);
    float (*get_gesture_drag_angle)(void);
    Vector2 (*get_gesture_pinch_vector)(void);
    float (*get_gesture_pinch_angle)(void);
    void (*update_camera)(Camera *camera, int mode);
    void (*update_camera_pro)(Camera *camera, Vector3 movement, Vector3 rotation, float zoom);
    void (*set_shapes_texture)(Texture2D texture, Rectangle source);
    Texture2D (*get_shapes_texture)(void);
    Rectangle (*get_shapes_texture_rectangle)(void);
    void (*draw_pixel)(int posX, int posY, Color color);
    void (*draw_pixel_v)(Vector2 position, Color color);
    void (*draw_line)(int startPosX, int startPosY, int endPosX, int endPosY, Color color);
    void (*draw_line_v)(Vector2 startPos, Vector2 endPos, Color color);
    void (*draw_line_ex)(Vector2 startPos, Vector2 endPos, float thick, Color color);
    void (*draw_line_strip)(const Vector2 *points, int pointCount, Color color);
    void (*draw_line_bezier)(Vector2 startPos, Vector2 endPos, float thick, Color color);
    void (*draw_circle)(int centerX, int centerY, float radius, Color color);
    void (*draw_circle_sector)(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color);
    void (*draw_circle_sector_lines)(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color);
    void (*draw_circle_gradient)(int centerX, int centerY, float radius, Color inner, Color outer);
    void (*draw_circle_v)(Vector2 center, float radius, Color color);
    void (*draw_circle_lines)(int centerX, int centerY, float radius, Color color);
    void (*draw_circle_lines_v)(Vector2 center, float radius, Color color);
    void (*draw_ellipse)(int centerX, int centerY, float radiusH, float radiusV, Color color);
    void (*draw_ellipse_lines)(int centerX, int centerY, float radiusH, float radiusV, Color color);
    void (*draw_ring)(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);
    void (*draw_ring_lines)(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);
    void (*draw_rectangle)(int posX, int posY, int width, int height, Color color);
    void (*draw_rectangle_v)(Vector2 position, Vector2 size, Color color);
    void (*draw_rectangle_rec)(Rectangle rec, Color color);
    void (*draw_rectangle_pro)(Rectangle rec, Vector2 origin, float rotation, Color color);
    void (*draw_rectangle_gradient_v)(int posX, int posY, int width, int height, Color top, Color bottom);
    void (*draw_rectangle_gradient_h)(int posX, int posY, int width, int height, Color left, Color right);
    void (*draw_rectangle_gradient_ex)(Rectangle rec, Color topLeft, Color bottomLeft, Color topRight, Color bottomRight);
    void (*draw_rectangle_lines)(int posX, int posY, int width, int height, Color color);
    void (*draw_rectangle_lines_ex)(Rectangle rec, float lineThick, Color color);
    void (*draw_rectangle_rounded)(Rectangle rec, float roundness, int segments, Color color);
    void (*draw_rectangle_rounded_lines)(Rectangle rec, float roundness, int segments, Color color);
    void (*draw_rectangle_rounded_lines_ex)(Rectangle rec, float roundness, int segments, float lineThick, Color color);
    void (*draw_triangle)(Vector2 v1, Vector2 v2, Vector2 v3, Color color);
    void (*draw_triangle_lines)(Vector2 v1, Vector2 v2, Vector2 v3, Color color);
    void (*draw_triangle_fan)(const Vector2 *points, int pointCount, Color color);
    void (*draw_triangle_strip)(const Vector2 *points, int pointCount, Color color);
    void (*draw_poly)(Vector2 center, int sides, float radius, float rotation, Color color);
    void (*draw_poly_lines)(Vector2 center, int sides, float radius, float rotation, Color color);
    void (*draw_poly_lines_ex)(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color);
    void (*draw_spline_linear)(const Vector2 *points, int pointCount, float thick, Color color);
    void (*draw_spline_basis)(const Vector2 *points, int pointCount, float thick, Color color);
    void (*draw_spline_catmull_rom)(const Vector2 *points, int pointCount, float thick, Color color);
    void (*draw_spline_bezier_quadratic)(const Vector2 *points, int pointCount, float thick, Color color);
    void (*draw_spline_bezier_cubic)(const Vector2 *points, int pointCount, float thick, Color color);
    void (*draw_spline_segment_linear)(Vector2 p1, Vector2 p2, float thick, Color color);
    void (*draw_spline_segment_basis)(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color);
    void (*draw_spline_segment_catmull_rom)(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color);
    void (*draw_spline_segment_bezier_quadratic)(Vector2 p1, Vector2 c2, Vector2 p3, float thick, Color color);
    void (*draw_spline_segment_bezier_cubic)(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float thick, Color color);
    Vector2 (*get_spline_point_linear)(Vector2 startPos, Vector2 endPos, float t);
    Vector2 (*get_spline_point_basis)(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);
    Vector2 (*get_spline_point_catmull_rom)(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);
    Vector2 (*get_spline_point_bezier_quad)(Vector2 p1, Vector2 c2, Vector2 p3, float t);
    Vector2 (*get_spline_point_bezier_cubic)(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t);
    bool (*check_collision_recs)(Rectangle rec1, Rectangle rec2);
    bool (*check_collision_circles)(Vector2 center1, float radius1, Vector2 center2, float radius2);
    bool (*check_collision_circle_rec)(Vector2 center, float radius, Rectangle rec);
    bool (*check_collision_circle_line)(Vector2 center, float radius, Vector2 p1, Vector2 p2);
    bool (*check_collision_point_rec)(Vector2 point, Rectangle rec);
    bool (*check_collision_point_circle)(Vector2 point, Vector2 center, float radius);
    bool (*check_collision_point_triangle)(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);
    bool (*check_collision_point_line)(Vector2 point, Vector2 p1, Vector2 p2, int threshold);
    bool (*check_collision_point_poly)(Vector2 point, const Vector2 *points, int pointCount);
    bool (*check_collision_lines)(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint);
    Rectangle (*get_collision_rec)(Rectangle rec1, Rectangle rec2);
    Image (*load_image)(const char *fileName);
    Image (*load_image_raw)(const char *fileName, int width, int height, int format, int headerSize);
    Image (*load_image_anim)(const char *fileName, int *frames);
    Image (*load_image_anim_from_memory)(const char *fileType, const unsigned char *fileData, int dataSize, int *frames);
    Image (*load_image_from_memory)(const char *fileType, const unsigned char *fileData, int dataSize);
    Image (*load_image_from_texture)(Texture2D texture);
    Image (*load_image_from_screen)(void);
    bool (*is_image_valid)(Image image);
    void (*unload_image)(Image image);
    bool (*export_image)(Image image, const char *fileName);
    unsigned char * (*export_image_to_memory)(Image image, const char *fileType, int *fileSize);
    bool (*export_image_as_code)(Image image, const char *fileName);
    Image (*gen_image_color)(int width, int height, Color color);
    Image (*gen_image_gradient_linear)(int width, int height, int direction, Color start, Color end);
    Image (*gen_image_gradient_radial)(int width, int height, float density, Color inner, Color outer);
    Image (*gen_image_gradient_square)(int width, int height, float density, Color inner, Color outer);
    Image (*gen_image_checked)(int width, int height, int checksX, int checksY, Color col1, Color col2);
    Image (*gen_image_white_noise)(int width, int height, float factor);
    Image (*gen_image_perlin_noise)(int width, int height, int offsetX, int offsetY, float scale);
    Image (*gen_image_cellular)(int width, int height, int tileSize);
    Image (*gen_image_text)(int width, int height, const char *text);
    Image (*image_copy)(Image image);
    Image (*image_from_image)(Image image, Rectangle rec);
    Image (*image_from_channel)(Image image, int selectedChannel);
    Image (*image_text)(const char *text, int fontSize, Color color);
    Image (*image_text_ex)(Font font, const char *text, float fontSize, float spacing, Color tint);
    void (*image_format)(Image *image, int newFormat);
    void (*image_to_pot)(Image *image, Color fill);
    void (*image_crop)(Image *image, Rectangle crop);
    void (*image_alpha_crop)(Image *image, float threshold);
    void (*image_alpha_clear)(Image *image, Color color, float threshold);
    void (*image_alpha_mask)(Image *image, Image alphaMask);
    void (*image_alpha_premultiply)(Image *image);
    void (*image_blur_gaussian)(Image *image, int blurSize);
    void (*image_kernel_convolution)(Image *image, const float *kernel, int kernelSize);
    void (*image_resize)(Image *image, int newWidth, int newHeight);
    void (*image_resize_nn)(Image *image, int newWidth, int newHeight);
    void (*image_resize_canvas)(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill);
    void (*image_mipmaps)(Image *image);
    void (*image_dither)(Image *image, int rBpp, int gBpp, int bBpp, int aBpp);
    void (*image_flip_vertical)(Image *image);
    void (*image_flip_horizontal)(Image *image);
    void (*image_rotate)(Image *image, int degrees);
    void (*image_rotate_cw)(Image *image);
    void (*image_rotate_ccw)(Image *image);
    void (*image_color_tint)(Image *image, Color color);
    void (*image_color_invert)(Image *image);
    void (*image_color_grayscale)(Image *image);
    void (*image_color_contrast)(Image *image, float contrast);
    void (*image_color_brightness)(Image *image, int brightness);
    void (*image_color_replace)(Image *image, Color color, Color replace);
    Color * (*load_image_colors)(Image image);
    Color * (*load_image_palette)(Image image, int maxPaletteSize, int *colorCount);
    void (*unload_image_colors)(Color *colors);
    void (*unload_image_palette)(Color *colors);
    Rectangle (*get_image_alpha_border)(Image image, float threshold);
    Color (*get_image_color)(Image image, int x, int y);
    void (*image_clear_background)(Image *dst, Color color);
    void (*image_draw_pixel)(Image *dst, int posX, int posY, Color color);
    void (*image_draw_pixel_v)(Image *dst, Vector2 position, Color color);
    void (*image_draw_line)(Image *dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color);
    void (*image_draw_line_v)(Image *dst, Vector2 start, Vector2 end, Color color);
    void (*image_draw_line_ex)(Image *dst, Vector2 start, Vector2 end, int thick, Color color);
    void (*image_draw_circle)(Image *dst, int centerX, int centerY, int radius, Color color);
    void (*image_draw_circle_v)(Image *dst, Vector2 center, int radius, Color color);
    void (*image_draw_circle_lines)(Image *dst, int centerX, int centerY, int radius, Color color);
    void (*image_draw_circle_lines_v)(Image *dst, Vector2 center, int radius, Color color);
    void (*image_draw_rectangle)(Image *dst, int posX, int posY, int width, int height, Color color);
    void (*image_draw_rectangle_v)(Image *dst, Vector2 position, Vector2 size, Color color);
    void (*image_draw_rectangle_rec)(Image *dst, Rectangle rec, Color color);
    void (*image_draw_rectangle_lines)(Image *dst, Rectangle rec, int thick, Color color);
    void (*image_draw_triangle)(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color);
    void (*image_draw_triangle_ex)(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color c1, Color c2, Color c3);
    void (*image_draw_triangle_lines)(Image *dst, Vector2 v1, Vector2 v2, Vector2 v3, Color color);
    void (*image_draw_triangle_fan)(Image *dst, Vector2 *points, int pointCount, Color color);
    void (*image_draw_triangle_strip)(Image *dst, Vector2 *points, int pointCount, Color color);
    void (*image_draw)(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint);
    void (*image_draw_text)(Image *dst, const char *text, int posX, int posY, int fontSize, Color color);
    void (*image_draw_text_ex)(Image *dst, Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint);
    Texture2D (*load_texture)(const char *fileName);
    Texture2D (*load_texture_from_image)(Image image);
    TextureCubemap (*load_texture_cubemap)(Image image, int layout);
    RenderTexture2D (*load_render_texture)(int width, int height);
    bool (*is_texture_valid)(Texture2D texture);
    void (*unload_texture)(Texture2D texture);
    bool (*is_render_texture_valid)(RenderTexture2D target);
    void (*unload_render_texture)(RenderTexture2D target);
    void (*update_texture)(Texture2D texture, const void *pixels);
    void (*update_texture_rec)(Texture2D texture, Rectangle rec, const void *pixels);
    void (*gen_texture_mipmaps)(Texture2D *texture);
    void (*set_texture_filter)(Texture2D texture, int filter);
    void (*set_texture_wrap)(Texture2D texture, int wrap);
    void (*draw_texture)(Texture2D texture, int posX, int posY, Color tint);
    void (*draw_texture_v)(Texture2D texture, Vector2 position, Color tint);
    void (*draw_texture_ex)(Texture2D texture, Vector2 position, float rotation, float scale, Color tint);
    void (*draw_texture_rec)(Texture2D texture, Rectangle source, Vector2 position, Color tint);
    void (*draw_texture_pro)(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint);
    void (*draw_texture_n_patch)(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint);
    bool (*color_is_equal)(Color col1, Color col2);
    Color (*fade)(Color color, float alpha);
    int (*color_to_int)(Color color);
    Vector4 (*color_normalize)(Color color);
    Color (*color_from_normalized)(Vector4 normalized);
    Vector3 (*color_to_hsv)(Color color);
    Color (*color_from_hsv)(float hue, float saturation, float value);
    Color (*color_tint)(Color color, Color tint);
    Color (*color_brightness)(Color color, float factor);
    Color (*color_contrast)(Color color, float contrast);
    Color (*color_alpha)(Color color, float alpha);
    Color (*color_alpha_blend)(Color dst, Color src, Color tint);
    Color (*color_lerp)(Color color1, Color color2, float factor);
    Color (*get_color)(unsigned int hexValue);
    Color (*get_pixel_color)(void *srcPtr, int format);
    void (*set_pixel_color)(void *dstPtr, Color color, int format);
    int (*get_pixel_data_size)(int width, int height, int format);
    Font (*get_font_default)(void);
    Font (*load_font)(const char *fileName);
    Font (*load_font_ex)(const char *fileName, int fontSize, int *codepoints, int codepointCount);
    Font (*load_font_from_image)(Image image, Color key, int firstChar);
    Font (*load_font_from_memory)(const char *fileType, const unsigned char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount);
    bool (*is_font_valid)(Font font);
    GlyphInfo * (*load_font_data)(const unsigned char *fileData, int dataSize, int fontSize, int *codepoints, int codepointCount, int type);
    Image (*gen_image_font_atlas)(const GlyphInfo *glyphs, Rectangle **glyphRecs, int glyphCount, int fontSize, int padding, int packMethod);
    void (*unload_font_data)(GlyphInfo *glyphs, int glyphCount);
    void (*unload_font)(Font font);
    bool (*export_font_as_code)(Font font, const char *fileName);
    void (*draw_fps)(int posX, int posY);
    void (*draw_text)(const char *text, int posX, int posY, int fontSize, Color color);
    void (*draw_text_ex)(Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint);
    void (*draw_text_pro)(Font font, const char *text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint);
    void (*draw_text_codepoint)(Font font, int codepoint, Vector2 position, float fontSize, Color tint);
    void (*draw_text_codepoints)(Font font, const int *codepoints, int codepointCount, Vector2 position, float fontSize, float spacing, Color tint);
    void (*set_text_line_spacing)(int spacing);
    int (*measure_text)(const char *text, int fontSize);
    Vector2 (*measure_text_ex)(Font font, const char *text, float fontSize, float spacing);
    int (*get_glyph_index)(Font font, int codepoint);
    GlyphInfo (*get_glyph_info)(Font font, int codepoint);
    Rectangle (*get_glyph_atlas_rec)(Font font, int codepoint);
    char * (*load_utf8)(const int *codepoints, int length);
    void (*unload_utf8)(char *text);
    int * (*load_codepoints)(const char *text, int *count);
    void (*unload_codepoints)(int *codepoints);
    int (*get_codepoint_count)(const char *text);
    int (*get_codepoint)(const char *text, int *codepointSize);
    int (*get_codepoint_next)(const char *text, int *codepointSize);
    int (*get_codepoint_previous)(const char *text, int *codepointSize);
    const char * (*codepoint_to_utf8)(int codepoint, int *utf8Size);
    int (*text_copy)(char *dst, const char *src);
    bool (*text_is_equal)(const char *text1, const char *text2);
    unsigned int (*text_length)(const char *text);
    const char * (*text_format)(const char *text, ...);
    const char * (*text_subtext)(const char *text, int position, int length);
    char * (*text_replace)(const char *text, const char *replace, const char *by);
    char * (*text_insert)(const char *text, const char *insert, int position);
    const char * (*text_join)(const char **textList, int count, const char *delimiter);
    const char ** (*text_split)(const char *text, char delimiter, int *count);
    void (*text_append)(char *text, const char *append, int *position);
    int (*text_find_index)(const char *text, const char *find);
    const char * (*text_to_upper)(const char *text);
    const char * (*text_to_lower)(const char *text);
    const char * (*text_to_pascal)(const char *text);
    const char * (*text_to_snake)(const char *text);
    const char * (*text_to_camel)(const char *text);
    int (*text_to_integer)(const char *text);
    float (*text_to_float)(const char *text);
    void (*draw_line3_d)(Vector3 startPos, Vector3 endPos, Color color);
    void (*draw_point3_d)(Vector3 position, Color color);
    void (*draw_circle3_d)(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color);
    void (*draw_triangle3_d)(Vector3 v1, Vector3 v2, Vector3 v3, Color color);
    void (*draw_triangle_strip3_d)(const Vector3 *points, int pointCount, Color color);
    void (*draw_cube)(Vector3 position, float width, float height, float length, Color color);
    void (*draw_cube_v)(Vector3 position, Vector3 size, Color color);
    void (*draw_cube_wires)(Vector3 position, float width, float height, float length, Color color);
    void (*draw_cube_wires_v)(Vector3 position, Vector3 size, Color color);
    void (*draw_sphere)(Vector3 centerPos, float radius, Color color);
    void (*draw_sphere_ex)(Vector3 centerPos, float radius, int rings, int slices, Color color);
    void (*draw_sphere_wires)(Vector3 centerPos, float radius, int rings, int slices, Color color);
    void (*draw_cylinder)(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);
    void (*draw_cylinder_ex)(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color);
    void (*draw_cylinder_wires)(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);
    void (*draw_cylinder_wires_ex)(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color);
    void (*draw_capsule)(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color);
    void (*draw_capsule_wires)(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color);
    void (*draw_plane)(Vector3 centerPos, Vector2 size, Color color);
    void (*draw_ray)(Ray ray, Color color);
    void (*draw_grid)(int slices, float spacing);
    Model (*load_model)(const char *fileName);
    Model (*load_model_from_mesh)(Mesh mesh);
    bool (*is_model_valid)(Model model);
    void (*unload_model)(Model model);
    BoundingBox (*get_model_bounding_box)(Model model);
    void (*draw_model)(Model model, Vector3 position, float scale, Color tint);
    void (*draw_model_ex)(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);
    void (*draw_model_wires)(Model model, Vector3 position, float scale, Color tint);
    void (*draw_model_wires_ex)(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);
    void (*draw_model_points)(Model model, Vector3 position, float scale, Color tint);
    void (*draw_model_points_ex)(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);
    void (*draw_bounding_box)(BoundingBox box, Color color);
    void (*draw_billboard)(Camera camera, Texture2D texture, Vector3 position, float scale, Color tint);
    void (*draw_billboard_rec)(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint);
    void (*draw_billboard_pro)(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, Color tint);
    void (*upload_mesh)(Mesh *mesh, bool dynamic);
    void (*update_mesh_buffer)(Mesh mesh, int index, const void *data, int dataSize, int offset);
    void (*unload_mesh)(Mesh mesh);
    void (*draw_mesh)(Mesh mesh, Material material, Matrix transform);
    void (*draw_mesh_instanced)(Mesh mesh, Material material, const Matrix *transforms, int instances);
    BoundingBox (*get_mesh_bounding_box)(Mesh mesh);
    void (*gen_mesh_tangents)(Mesh *mesh);
    bool (*export_mesh)(Mesh mesh, const char *fileName);
    bool (*export_mesh_as_code)(Mesh mesh, const char *fileName);
    Mesh (*gen_mesh_poly)(int sides, float radius);
    Mesh (*gen_mesh_plane)(float width, float length, int resX, int resZ);
    Mesh (*gen_mesh_cube)(float width, float height, float length);
    Mesh (*gen_mesh_sphere)(float radius, int rings, int slices);
    Mesh (*gen_mesh_hemi_sphere)(float radius, int rings, int slices);
    Mesh (*gen_mesh_cylinder)(float radius, float height, int slices);
    Mesh (*gen_mesh_cone)(float radius, float height, int slices);
    Mesh (*gen_mesh_torus)(float radius, float size, int radSeg, int sides);
    Mesh (*gen_mesh_knot)(float radius, float size, int radSeg, int sides);
    Mesh (*gen_mesh_heightmap)(Image heightmap, Vector3 size);
    Mesh (*gen_mesh_cubicmap)(Image cubicmap, Vector3 cubeSize);
    Material * (*load_materials)(const char *fileName, int *materialCount);
    Material (*load_material_default)(void);
    bool (*is_material_valid)(Material material);
    void (*unload_material)(Material material);
    void (*set_material_texture)(Material *material, int mapType, Texture2D texture);
    void (*set_model_mesh_material)(Model *model, int meshId, int materialId);
    ModelAnimation * (*load_model_animations)(const char *fileName, int *animCount);
    void (*update_model_animation)(Model model, ModelAnimation anim, int frame);
    void (*update_model_animation_bones)(Model model, ModelAnimation anim, int frame);
    void (*unload_model_animation)(ModelAnimation anim);
    void (*unload_model_animations)(ModelAnimation *animations, int animCount);
    bool (*is_model_animation_valid)(Model model, ModelAnimation anim);
    bool (*check_collision_spheres)(Vector3 center1, float radius1, Vector3 center2, float radius2);
    bool (*check_collision_boxes)(BoundingBox box1, BoundingBox box2);
    bool (*check_collision_box_sphere)(BoundingBox box, Vector3 center, float radius);
    RayCollision (*get_ray_collision_sphere)(Ray ray, Vector3 center, float radius);
    RayCollision (*get_ray_collision_box)(Ray ray, BoundingBox box);
    RayCollision (*get_ray_collision_mesh)(Ray ray, Mesh mesh, Matrix transform);
    RayCollision (*get_ray_collision_triangle)(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);
    RayCollision (*get_ray_collision_quad)(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4);
    void (*init_audio_device)(void);
    void (*close_audio_device)(void);
    bool (*is_audio_device_ready)(void);
    void (*set_master_volume)(float volume);
    float (*get_master_volume)(void);
    Wave (*load_wave)(const char *fileName);
    Wave (*load_wave_from_memory)(const char *fileType, const unsigned char *fileData, int dataSize);
    bool (*is_wave_valid)(Wave wave);
    Sound (*load_sound)(const char *fileName);
    Sound (*load_sound_from_wave)(Wave wave);
    Sound (*load_sound_alias)(Sound source);
    bool (*is_sound_valid)(Sound sound);
    void (*update_sound)(Sound sound, const void *data, int sampleCount);
    void (*unload_wave)(Wave wave);
    void (*unload_sound)(Sound sound);
    void (*unload_sound_alias)(Sound alias);
    bool (*export_wave)(Wave wave, const char *fileName);
    bool (*export_wave_as_code)(Wave wave, const char *fileName);
    void (*play_sound)(Sound sound);
    void (*stop_sound)(Sound sound);
    void (*pause_sound)(Sound sound);
    void (*resume_sound)(Sound sound);
    bool (*is_sound_playing)(Sound sound);
    void (*set_sound_volume)(Sound sound, float volume);
    void (*set_sound_pitch)(Sound sound, float pitch);
    void (*set_sound_pan)(Sound sound, float pan);
    Wave (*wave_copy)(Wave wave);
    void (*wave_crop)(Wave *wave, int initFrame, int finalFrame);
    void (*wave_format)(Wave *wave, int sampleRate, int sampleSize, int channels);
    float * (*load_wave_samples)(Wave wave);
    void (*unload_wave_samples)(float *samples);
    Music (*load_music_stream)(const char *fileName);
    Music (*load_music_stream_from_memory)(const char *fileType, const unsigned char *data, int dataSize);
    bool (*is_music_valid)(Music music);
    void (*unload_music_stream)(Music music);
    void (*play_music_stream)(Music music);
    bool (*is_music_stream_playing)(Music music);
    void (*update_music_stream)(Music music);
    void (*stop_music_stream)(Music music);
    void (*pause_music_stream)(Music music);
    void (*resume_music_stream)(Music music);
    void (*seek_music_stream)(Music music, float position);
    void (*set_music_volume)(Music music, float volume);
    void (*set_music_pitch)(Music music, float pitch);
    void (*set_music_pan)(Music music, float pan);
    float (*get_music_time_length)(Music music);
    float (*get_music_time_played)(Music music);
    AudioStream (*load_audio_stream)(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels);
    bool (*is_audio_stream_valid)(AudioStream stream);
    void (*unload_audio_stream)(AudioStream stream);
    void (*update_audio_stream)(AudioStream stream, const void *data, int frameCount);
    bool (*is_audio_stream_processed)(AudioStream stream);
    void (*play_audio_stream)(AudioStream stream);
    void (*pause_audio_stream)(AudioStream stream);
    void (*resume_audio_stream)(AudioStream stream);
    bool (*is_audio_stream_playing)(AudioStream stream);
    void (*stop_audio_stream)(AudioStream stream);
    void (*set_audio_stream_volume)(AudioStream stream, float volume);
    void (*set_audio_stream_pitch)(AudioStream stream, float pitch);
    void (*set_audio_stream_pan)(AudioStream stream, float pan);
    void (*set_audio_stream_buffer_size_default)(int size);
    void (*set_audio_stream_callback)(AudioStream stream, AudioCallback callback);
    void (*attach_audio_stream_processor)(AudioStream stream, AudioCallback processor);
    void (*detach_audio_stream_processor)(AudioStream stream, AudioCallback processor);
    void (*attach_audio_mixed_processor)(AudioCallback processor);
    void (*detach_audio_mixed_processor)(AudioCallback processor);
} RaylibAPI;

// Global API pointer (set by main executable)
extern RaylibAPI* rl;

static inline RaylibAPI* create_raylib_api(void) {
    static RaylibAPI api = {
        .init_window = InitWindow,
        .close_window = CloseWindow,
        .window_should_close = WindowShouldClose,
        .is_window_ready = IsWindowReady,
        .is_window_fullscreen = IsWindowFullscreen,
        .is_window_hidden = IsWindowHidden,
        .is_window_minimized = IsWindowMinimized,
        .is_window_maximized = IsWindowMaximized,
        .is_window_focused = IsWindowFocused,
        .is_window_resized = IsWindowResized,
        .is_window_state = IsWindowState,
        .set_window_state = SetWindowState,
        .clear_window_state = ClearWindowState,
        .toggle_fullscreen = ToggleFullscreen,
        .toggle_borderless_windowed = ToggleBorderlessWindowed,
        .maximize_window = MaximizeWindow,
        .minimize_window = MinimizeWindow,
        .restore_window = RestoreWindow,
        .set_window_icon = SetWindowIcon,
        .set_window_icons = SetWindowIcons,
        .set_window_title = SetWindowTitle,
        .set_window_position = SetWindowPosition,
        .set_window_monitor = SetWindowMonitor,
        .set_window_min_size = SetWindowMinSize,
        .set_window_max_size = SetWindowMaxSize,
        .set_window_size = SetWindowSize,
        .set_window_opacity = SetWindowOpacity,
        .set_window_focused = SetWindowFocused,
        .get_window_handle = GetWindowHandle,
        .get_screen_width = GetScreenWidth,
        .get_screen_height = GetScreenHeight,
        .get_render_width = GetRenderWidth,
        .get_render_height = GetRenderHeight,
        .get_monitor_count = GetMonitorCount,
        .get_current_monitor = GetCurrentMonitor,
        .get_monitor_position = GetMonitorPosition,
        .get_monitor_width = GetMonitorWidth,
        .get_monitor_height = GetMonitorHeight,
        .get_monitor_physical_width = GetMonitorPhysicalWidth,
        .get_monitor_physical_height = GetMonitorPhysicalHeight,
        .get_monitor_refresh_rate = GetMonitorRefreshRate,
        .get_window_position = GetWindowPosition,
        .get_window_scale_dpi = GetWindowScaleDPI,
        .get_monitor_name = GetMonitorName,
        .set_clipboard_text = SetClipboardText,
        .get_clipboard_text = GetClipboardText,
        .get_clipboard_image = GetClipboardImage,
        .enable_event_waiting = EnableEventWaiting,
        .disable_event_waiting = DisableEventWaiting,
        .show_cursor = ShowCursor,
        .hide_cursor = HideCursor,
        .is_cursor_hidden = IsCursorHidden,
        .enable_cursor = EnableCursor,
        .disable_cursor = DisableCursor,
        .is_cursor_on_screen = IsCursorOnScreen,
        .clear_background = ClearBackground,
        .begin_drawing = BeginDrawing,
        .end_drawing = EndDrawing,
        .begin_mode2_d = BeginMode2D,
        .end_mode2_d = EndMode2D,
        .begin_mode3_d = BeginMode3D,
        .end_mode3_d = EndMode3D,
        .begin_texture_mode = BeginTextureMode,
        .end_texture_mode = EndTextureMode,
        .begin_shader_mode = BeginShaderMode,
        .end_shader_mode = EndShaderMode,
        .begin_blend_mode = BeginBlendMode,
        .end_blend_mode = EndBlendMode,
        .begin_scissor_mode = BeginScissorMode,
        .end_scissor_mode = EndScissorMode,
        .begin_vr_stereo_mode = BeginVrStereoMode,
        .end_vr_stereo_mode = EndVrStereoMode,
        .load_vr_stereo_config = LoadVrStereoConfig,
        .unload_vr_stereo_config = UnloadVrStereoConfig,
        .load_shader = LoadShader,
        .load_shader_from_memory = LoadShaderFromMemory,
        .is_shader_valid = IsShaderValid,
        .get_shader_location = GetShaderLocation,
        .get_shader_location_attrib = GetShaderLocationAttrib,
        .set_shader_value = SetShaderValue,
        .set_shader_value_v = SetShaderValueV,
        .set_shader_value_matrix = SetShaderValueMatrix,
        .set_shader_value_texture = SetShaderValueTexture,
        .unload_shader = UnloadShader,
        .get_screen_to_world_ray = GetScreenToWorldRay,
        .get_screen_to_world_ray_ex = GetScreenToWorldRayEx,
        .get_world_to_screen = GetWorldToScreen,
        .get_world_to_screen_ex = GetWorldToScreenEx,
        .get_world_to_screen2_d = GetWorldToScreen2D,
        .get_screen_to_world2_d = GetScreenToWorld2D,
        .get_camera_matrix = GetCameraMatrix,
        .get_camera_matrix2_d = GetCameraMatrix2D,
        .set_target_fps = SetTargetFPS,
        .get_frame_time = GetFrameTime,
        .get_time = GetTime,
        .get_fps = GetFPS,
        .swap_screen_buffer = SwapScreenBuffer,
        .poll_input_events = PollInputEvents,
        .wait_time = WaitTime,
        .set_random_seed = SetRandomSeed,
        .get_random_value = GetRandomValue,
        .load_random_sequence = LoadRandomSequence,
        .unload_random_sequence = UnloadRandomSequence,
        .take_screenshot = TakeScreenshot,
        .set_config_flags = SetConfigFlags,
        .open_url = OpenURL,
        .trace_log = TraceLog,
        .set_trace_log_level = SetTraceLogLevel,
        .mem_alloc = MemAlloc,
        .mem_realloc = MemRealloc,
        .mem_free = MemFree,
        .set_trace_log_callback = SetTraceLogCallback,
        .set_load_file_data_callback = SetLoadFileDataCallback,
        .set_save_file_data_callback = SetSaveFileDataCallback,
        .set_load_file_text_callback = SetLoadFileTextCallback,
        .set_save_file_text_callback = SetSaveFileTextCallback,
        .load_file_data = LoadFileData,
        .unload_file_data = UnloadFileData,
        .save_file_data = SaveFileData,
        .export_data_as_code = ExportDataAsCode,
        .load_file_text = LoadFileText,
        .unload_file_text = UnloadFileText,
        .save_file_text = SaveFileText,
        .file_exists = FileExists,
        .directory_exists = DirectoryExists,
        .is_file_extension = IsFileExtension,
        .get_file_length = GetFileLength,
        .get_file_extension = GetFileExtension,
        .get_file_name = GetFileName,
        .get_file_name_without_ext = GetFileNameWithoutExt,
        .get_directory_path = GetDirectoryPath,
        .get_prev_directory_path = GetPrevDirectoryPath,
        .get_working_directory = GetWorkingDirectory,
        .get_application_directory = GetApplicationDirectory,
        .make_directory = MakeDirectory,
        .change_directory = ChangeDirectory,
        .is_path_file = IsPathFile,
        .is_file_name_valid = IsFileNameValid,
        .load_directory_files = LoadDirectoryFiles,
        .load_directory_files_ex = LoadDirectoryFilesEx,
        .unload_directory_files = UnloadDirectoryFiles,
        .is_file_dropped = IsFileDropped,
        .load_dropped_files = LoadDroppedFiles,
        .unload_dropped_files = UnloadDroppedFiles,
        .get_file_mod_time = GetFileModTime,
        .compress_data = CompressData,
        .decompress_data = DecompressData,
        .encode_data_base64 = EncodeDataBase64,
        .decode_data_base64 = DecodeDataBase64,
        .compute_crc32 = ComputeCRC32,
        .compute_md5 = ComputeMD5,
        .compute_sha1 = ComputeSHA1,
        .load_automation_event_list = LoadAutomationEventList,
        .unload_automation_event_list = UnloadAutomationEventList,
        .export_automation_event_list = ExportAutomationEventList,
        .set_automation_event_list = SetAutomationEventList,
        .set_automation_event_base_frame = SetAutomationEventBaseFrame,
        .start_automation_event_recording = StartAutomationEventRecording,
        .stop_automation_event_recording = StopAutomationEventRecording,
        .play_automation_event = PlayAutomationEvent,
        .is_key_pressed = IsKeyPressed,
        .is_key_pressed_repeat = IsKeyPressedRepeat,
        .is_key_down = IsKeyDown,
        .is_key_released = IsKeyReleased,
        .is_key_up = IsKeyUp,
        .get_key_pressed = GetKeyPressed,
        .get_char_pressed = GetCharPressed,
        .set_exit_key = SetExitKey,
        .is_gamepad_available = IsGamepadAvailable,
        .get_gamepad_name = GetGamepadName,
        .is_gamepad_button_pressed = IsGamepadButtonPressed,
        .is_gamepad_button_down = IsGamepadButtonDown,
        .is_gamepad_button_released = IsGamepadButtonReleased,
        .is_gamepad_button_up = IsGamepadButtonUp,
        .get_gamepad_button_pressed = GetGamepadButtonPressed,
        .get_gamepad_axis_count = GetGamepadAxisCount,
        .get_gamepad_axis_movement = GetGamepadAxisMovement,
        .set_gamepad_mappings = SetGamepadMappings,
        .set_gamepad_vibration = SetGamepadVibration,
        .is_mouse_button_pressed = IsMouseButtonPressed,
        .is_mouse_button_down = IsMouseButtonDown,
        .is_mouse_button_released = IsMouseButtonReleased,
        .is_mouse_button_up = IsMouseButtonUp,
        .get_mouse_x = GetMouseX,
        .get_mouse_y = GetMouseY,
        .get_mouse_position = GetMousePosition,
        .get_mouse_delta = GetMouseDelta,
        .set_mouse_position = SetMousePosition,
        .set_mouse_offset = SetMouseOffset,
        .set_mouse_scale = SetMouseScale,
        .get_mouse_wheel_move = GetMouseWheelMove,
        .get_mouse_wheel_move_v = GetMouseWheelMoveV,
        .set_mouse_cursor = SetMouseCursor,
        .get_touch_x = GetTouchX,
        .get_touch_y = GetTouchY,
        .get_touch_position = GetTouchPosition,
        .get_touch_point_id = GetTouchPointId,
        .get_touch_point_count = GetTouchPointCount,
        .set_gestures_enabled = SetGesturesEnabled,
        .is_gesture_detected = IsGestureDetected,
        .get_gesture_detected = GetGestureDetected,
        .get_gesture_hold_duration = GetGestureHoldDuration,
        .get_gesture_drag_vector = GetGestureDragVector,
        .get_gesture_drag_angle = GetGestureDragAngle,
        .get_gesture_pinch_vector = GetGesturePinchVector,
        .get_gesture_pinch_angle = GetGesturePinchAngle,
        .update_camera = UpdateCamera,
        .update_camera_pro = UpdateCameraPro,
        .set_shapes_texture = SetShapesTexture,
        .get_shapes_texture = GetShapesTexture,
        .get_shapes_texture_rectangle = GetShapesTextureRectangle,
        .draw_pixel = DrawPixel,
        .draw_pixel_v = DrawPixelV,
        .draw_line = DrawLine,
        .draw_line_v = DrawLineV,
        .draw_line_ex = DrawLineEx,
        .draw_line_strip = DrawLineStrip,
        .draw_line_bezier = DrawLineBezier,
        .draw_circle = DrawCircle,
        .draw_circle_sector = DrawCircleSector,
        .draw_circle_sector_lines = DrawCircleSectorLines,
        .draw_circle_gradient = DrawCircleGradient,
        .draw_circle_v = DrawCircleV,
        .draw_circle_lines = DrawCircleLines,
        .draw_circle_lines_v = DrawCircleLinesV,
        .draw_ellipse = DrawEllipse,
        .draw_ellipse_lines = DrawEllipseLines,
        .draw_ring = DrawRing,
        .draw_ring_lines = DrawRingLines,
        .draw_rectangle = DrawRectangle,
        .draw_rectangle_v = DrawRectangleV,
        .draw_rectangle_rec = DrawRectangleRec,
        .draw_rectangle_pro = DrawRectanglePro,
        .draw_rectangle_gradient_v = DrawRectangleGradientV,
        .draw_rectangle_gradient_h = DrawRectangleGradientH,
        .draw_rectangle_gradient_ex = DrawRectangleGradientEx,
        .draw_rectangle_lines = DrawRectangleLines,
        .draw_rectangle_lines_ex = DrawRectangleLinesEx,
        .draw_rectangle_rounded = DrawRectangleRounded,
        .draw_rectangle_rounded_lines = DrawRectangleRoundedLines,
        .draw_rectangle_rounded_lines_ex = DrawRectangleRoundedLinesEx,
        .draw_triangle = DrawTriangle,
        .draw_triangle_lines = DrawTriangleLines,
        .draw_triangle_fan = DrawTriangleFan,
        .draw_triangle_strip = DrawTriangleStrip,
        .draw_poly = DrawPoly,
        .draw_poly_lines = DrawPolyLines,
        .draw_poly_lines_ex = DrawPolyLinesEx,
        .draw_spline_linear = DrawSplineLinear,
        .draw_spline_basis = DrawSplineBasis,
        .draw_spline_catmull_rom = DrawSplineCatmullRom,
        .draw_spline_bezier_quadratic = DrawSplineBezierQuadratic,
        .draw_spline_bezier_cubic = DrawSplineBezierCubic,
        .draw_spline_segment_linear = DrawSplineSegmentLinear,
        .draw_spline_segment_basis = DrawSplineSegmentBasis,
        .draw_spline_segment_catmull_rom = DrawSplineSegmentCatmullRom,
        .draw_spline_segment_bezier_quadratic = DrawSplineSegmentBezierQuadratic,
        .draw_spline_segment_bezier_cubic = DrawSplineSegmentBezierCubic,
        .get_spline_point_linear = GetSplinePointLinear,
        .get_spline_point_basis = GetSplinePointBasis,
        .get_spline_point_catmull_rom = GetSplinePointCatmullRom,
        .get_spline_point_bezier_quad = GetSplinePointBezierQuad,
        .get_spline_point_bezier_cubic = GetSplinePointBezierCubic,
        .check_collision_recs = CheckCollisionRecs,
        .check_collision_circles = CheckCollisionCircles,
        .check_collision_circle_rec = CheckCollisionCircleRec,
        .check_collision_circle_line = CheckCollisionCircleLine,
        .check_collision_point_rec = CheckCollisionPointRec,
        .check_collision_point_circle = CheckCollisionPointCircle,
        .check_collision_point_triangle = CheckCollisionPointTriangle,
        .check_collision_point_line = CheckCollisionPointLine,
        .check_collision_point_poly = CheckCollisionPointPoly,
        .check_collision_lines = CheckCollisionLines,
        .get_collision_rec = GetCollisionRec,
        .load_image = LoadImage,
        .load_image_raw = LoadImageRaw,
        .load_image_anim = LoadImageAnim,
        .load_image_anim_from_memory = LoadImageAnimFromMemory,
        .load_image_from_memory = LoadImageFromMemory,
        .load_image_from_texture = LoadImageFromTexture,
        .load_image_from_screen = LoadImageFromScreen,
        .is_image_valid = IsImageValid,
        .unload_image = UnloadImage,
        .export_image = ExportImage,
        .export_image_to_memory = ExportImageToMemory,
        .export_image_as_code = ExportImageAsCode,
        .gen_image_color = GenImageColor,
        .gen_image_gradient_linear = GenImageGradientLinear,
        .gen_image_gradient_radial = GenImageGradientRadial,
        .gen_image_gradient_square = GenImageGradientSquare,
        .gen_image_checked = GenImageChecked,
        .gen_image_white_noise = GenImageWhiteNoise,
        .gen_image_perlin_noise = GenImagePerlinNoise,
        .gen_image_cellular = GenImageCellular,
        .gen_image_text = GenImageText,
        .image_copy = ImageCopy,
        .image_from_image = ImageFromImage,
        .image_from_channel = ImageFromChannel,
        .image_text = ImageText,
        .image_text_ex = ImageTextEx,
        .image_format = ImageFormat,
        .image_to_pot = ImageToPOT,
        .image_crop = ImageCrop,
        .image_alpha_crop = ImageAlphaCrop,
        .image_alpha_clear = ImageAlphaClear,
        .image_alpha_mask = ImageAlphaMask,
        .image_alpha_premultiply = ImageAlphaPremultiply,
        .image_blur_gaussian = ImageBlurGaussian,
        .image_kernel_convolution = ImageKernelConvolution,
        .image_resize = ImageResize,
        .image_resize_nn = ImageResizeNN,
        .image_resize_canvas = ImageResizeCanvas,
        .image_mipmaps = ImageMipmaps,
        .image_dither = ImageDither,
        .image_flip_vertical = ImageFlipVertical,
        .image_flip_horizontal = ImageFlipHorizontal,
        .image_rotate = ImageRotate,
        .image_rotate_cw = ImageRotateCW,
        .image_rotate_ccw = ImageRotateCCW,
        .image_color_tint = ImageColorTint,
        .image_color_invert = ImageColorInvert,
        .image_color_grayscale = ImageColorGrayscale,
        .image_color_contrast = ImageColorContrast,
        .image_color_brightness = ImageColorBrightness,
        .image_color_replace = ImageColorReplace,
        .load_image_colors = LoadImageColors,
        .load_image_palette = LoadImagePalette,
        .unload_image_colors = UnloadImageColors,
        .unload_image_palette = UnloadImagePalette,
        .get_image_alpha_border = GetImageAlphaBorder,
        .get_image_color = GetImageColor,
        .image_clear_background = ImageClearBackground,
        .image_draw_pixel = ImageDrawPixel,
        .image_draw_pixel_v = ImageDrawPixelV,
        .image_draw_line = ImageDrawLine,
        .image_draw_line_v = ImageDrawLineV,
        .image_draw_line_ex = ImageDrawLineEx,
        .image_draw_circle = ImageDrawCircle,
        .image_draw_circle_v = ImageDrawCircleV,
        .image_draw_circle_lines = ImageDrawCircleLines,
        .image_draw_circle_lines_v = ImageDrawCircleLinesV,
        .image_draw_rectangle = ImageDrawRectangle,
        .image_draw_rectangle_v = ImageDrawRectangleV,
        .image_draw_rectangle_rec = ImageDrawRectangleRec,
        .image_draw_rectangle_lines = ImageDrawRectangleLines,
        .image_draw_triangle = ImageDrawTriangle,
        .image_draw_triangle_ex = ImageDrawTriangleEx,
        .image_draw_triangle_lines = ImageDrawTriangleLines,
        .image_draw_triangle_fan = ImageDrawTriangleFan,
        .image_draw_triangle_strip = ImageDrawTriangleStrip,
        .image_draw = ImageDraw,
        .image_draw_text = ImageDrawText,
        .image_draw_text_ex = ImageDrawTextEx,
        .load_texture = LoadTexture,
        .load_texture_from_image = LoadTextureFromImage,
        .load_texture_cubemap = LoadTextureCubemap,
        .load_render_texture = LoadRenderTexture,
        .is_texture_valid = IsTextureValid,
        .unload_texture = UnloadTexture,
        .is_render_texture_valid = IsRenderTextureValid,
        .unload_render_texture = UnloadRenderTexture,
        .update_texture = UpdateTexture,
        .update_texture_rec = UpdateTextureRec,
        .gen_texture_mipmaps = GenTextureMipmaps,
        .set_texture_filter = SetTextureFilter,
        .set_texture_wrap = SetTextureWrap,
        .draw_texture = DrawTexture,
        .draw_texture_v = DrawTextureV,
        .draw_texture_ex = DrawTextureEx,
        .draw_texture_rec = DrawTextureRec,
        .draw_texture_pro = DrawTexturePro,
        .draw_texture_n_patch = DrawTextureNPatch,
        .color_is_equal = ColorIsEqual,
        .fade = Fade,
        .color_to_int = ColorToInt,
        .color_normalize = ColorNormalize,
        .color_from_normalized = ColorFromNormalized,
        .color_to_hsv = ColorToHSV,
        .color_from_hsv = ColorFromHSV,
        .color_tint = ColorTint,
        .color_brightness = ColorBrightness,
        .color_contrast = ColorContrast,
        .color_alpha = ColorAlpha,
        .color_alpha_blend = ColorAlphaBlend,
        .color_lerp = ColorLerp,
        .get_color = GetColor,
        .get_pixel_color = GetPixelColor,
        .set_pixel_color = SetPixelColor,
        .get_pixel_data_size = GetPixelDataSize,
        .get_font_default = GetFontDefault,
        .load_font = LoadFont,
        .load_font_ex = LoadFontEx,
        .load_font_from_image = LoadFontFromImage,
        .load_font_from_memory = LoadFontFromMemory,
        .is_font_valid = IsFontValid,
        .load_font_data = LoadFontData,
        .gen_image_font_atlas = GenImageFontAtlas,
        .unload_font_data = UnloadFontData,
        .unload_font = UnloadFont,
        .export_font_as_code = ExportFontAsCode,
        .draw_fps = DrawFPS,
        .draw_text = DrawText,
        .draw_text_ex = DrawTextEx,
        .draw_text_pro = DrawTextPro,
        .draw_text_codepoint = DrawTextCodepoint,
        .draw_text_codepoints = DrawTextCodepoints,
        .set_text_line_spacing = SetTextLineSpacing,
        .measure_text = MeasureText,
        .measure_text_ex = MeasureTextEx,
        .get_glyph_index = GetGlyphIndex,
        .get_glyph_info = GetGlyphInfo,
        .get_glyph_atlas_rec = GetGlyphAtlasRec,
        .load_utf8 = LoadUTF8,
        .unload_utf8 = UnloadUTF8,
        .load_codepoints = LoadCodepoints,
        .unload_codepoints = UnloadCodepoints,
        .get_codepoint_count = GetCodepointCount,
        .get_codepoint = GetCodepoint,
        .get_codepoint_next = GetCodepointNext,
        .get_codepoint_previous = GetCodepointPrevious,
        .codepoint_to_utf8 = CodepointToUTF8,
        .text_copy = TextCopy,
        .text_is_equal = TextIsEqual,
        .text_length = TextLength,
        .text_format = TextFormat,
        .text_subtext = TextSubtext,
        .text_replace = TextReplace,
        .text_insert = TextInsert,
        .text_join = TextJoin,
        .text_split = TextSplit,
        .text_append = TextAppend,
        .text_find_index = TextFindIndex,
        .text_to_upper = TextToUpper,
        .text_to_lower = TextToLower,
        .text_to_pascal = TextToPascal,
        .text_to_snake = TextToSnake,
        .text_to_camel = TextToCamel,
        .text_to_integer = TextToInteger,
        .text_to_float = TextToFloat,
        .draw_line3_d = DrawLine3D,
        .draw_point3_d = DrawPoint3D,
        .draw_circle3_d = DrawCircle3D,
        .draw_triangle3_d = DrawTriangle3D,
        .draw_triangle_strip3_d = DrawTriangleStrip3D,
        .draw_cube = DrawCube,
        .draw_cube_v = DrawCubeV,
        .draw_cube_wires = DrawCubeWires,
        .draw_cube_wires_v = DrawCubeWiresV,
        .draw_sphere = DrawSphere,
        .draw_sphere_ex = DrawSphereEx,
        .draw_sphere_wires = DrawSphereWires,
        .draw_cylinder = DrawCylinder,
        .draw_cylinder_ex = DrawCylinderEx,
        .draw_cylinder_wires = DrawCylinderWires,
        .draw_cylinder_wires_ex = DrawCylinderWiresEx,
        .draw_capsule = DrawCapsule,
        .draw_capsule_wires = DrawCapsuleWires,
        .draw_plane = DrawPlane,
        .draw_ray = DrawRay,
        .draw_grid = DrawGrid,
        .load_model = LoadModel,
        .load_model_from_mesh = LoadModelFromMesh,
        .is_model_valid = IsModelValid,
        .unload_model = UnloadModel,
        .get_model_bounding_box = GetModelBoundingBox,
        .draw_model = DrawModel,
        .draw_model_ex = DrawModelEx,
        .draw_model_wires = DrawModelWires,
        .draw_model_wires_ex = DrawModelWiresEx,
        .draw_model_points = DrawModelPoints,
        .draw_model_points_ex = DrawModelPointsEx,
        .draw_bounding_box = DrawBoundingBox,
        .draw_billboard = DrawBillboard,
        .draw_billboard_rec = DrawBillboardRec,
        .draw_billboard_pro = DrawBillboardPro,
        .upload_mesh = UploadMesh,
        .update_mesh_buffer = UpdateMeshBuffer,
        .unload_mesh = UnloadMesh,
        .draw_mesh = DrawMesh,
        .draw_mesh_instanced = DrawMeshInstanced,
        .get_mesh_bounding_box = GetMeshBoundingBox,
        .gen_mesh_tangents = GenMeshTangents,
        .export_mesh = ExportMesh,
        .export_mesh_as_code = ExportMeshAsCode,
        .gen_mesh_poly = GenMeshPoly,
        .gen_mesh_plane = GenMeshPlane,
        .gen_mesh_cube = GenMeshCube,
        .gen_mesh_sphere = GenMeshSphere,
        .gen_mesh_hemi_sphere = GenMeshHemiSphere,
        .gen_mesh_cylinder = GenMeshCylinder,
        .gen_mesh_cone = GenMeshCone,
        .gen_mesh_torus = GenMeshTorus,
        .gen_mesh_knot = GenMeshKnot,
        .gen_mesh_heightmap = GenMeshHeightmap,
        .gen_mesh_cubicmap = GenMeshCubicmap,
        .load_materials = LoadMaterials,
        .load_material_default = LoadMaterialDefault,
        .is_material_valid = IsMaterialValid,
        .unload_material = UnloadMaterial,
        .set_material_texture = SetMaterialTexture,
        .set_model_mesh_material = SetModelMeshMaterial,
        .load_model_animations = LoadModelAnimations,
        .update_model_animation = UpdateModelAnimation,
        .update_model_animation_bones = UpdateModelAnimationBones,
        .unload_model_animation = UnloadModelAnimation,
        .unload_model_animations = UnloadModelAnimations,
        .is_model_animation_valid = IsModelAnimationValid,
        .check_collision_spheres = CheckCollisionSpheres,
        .check_collision_boxes = CheckCollisionBoxes,
        .check_collision_box_sphere = CheckCollisionBoxSphere,
        .get_ray_collision_sphere = GetRayCollisionSphere,
        .get_ray_collision_box = GetRayCollisionBox,
        .get_ray_collision_mesh = GetRayCollisionMesh,
        .get_ray_collision_triangle = GetRayCollisionTriangle,
        .get_ray_collision_quad = GetRayCollisionQuad,
        .init_audio_device = InitAudioDevice,
        .close_audio_device = CloseAudioDevice,
        .is_audio_device_ready = IsAudioDeviceReady,
        .set_master_volume = SetMasterVolume,
        .get_master_volume = GetMasterVolume,
        .load_wave = LoadWave,
        .load_wave_from_memory = LoadWaveFromMemory,
        .is_wave_valid = IsWaveValid,
        .load_sound = LoadSound,
        .load_sound_from_wave = LoadSoundFromWave,
        .load_sound_alias = LoadSoundAlias,
        .is_sound_valid = IsSoundValid,
        .update_sound = UpdateSound,
        .unload_wave = UnloadWave,
        .unload_sound = UnloadSound,
        .unload_sound_alias = UnloadSoundAlias,
        .export_wave = ExportWave,
        .export_wave_as_code = ExportWaveAsCode,
        .play_sound = PlaySound,
        .stop_sound = StopSound,
        .pause_sound = PauseSound,
        .resume_sound = ResumeSound,
        .is_sound_playing = IsSoundPlaying,
        .set_sound_volume = SetSoundVolume,
        .set_sound_pitch = SetSoundPitch,
        .set_sound_pan = SetSoundPan,
        .wave_copy = WaveCopy,
        .wave_crop = WaveCrop,
        .wave_format = WaveFormat,
        .load_wave_samples = LoadWaveSamples,
        .unload_wave_samples = UnloadWaveSamples,
        .load_music_stream = LoadMusicStream,
        .load_music_stream_from_memory = LoadMusicStreamFromMemory,
        .is_music_valid = IsMusicValid,
        .unload_music_stream = UnloadMusicStream,
        .play_music_stream = PlayMusicStream,
        .is_music_stream_playing = IsMusicStreamPlaying,
        .update_music_stream = UpdateMusicStream,
        .stop_music_stream = StopMusicStream,
        .pause_music_stream = PauseMusicStream,
        .resume_music_stream = ResumeMusicStream,
        .seek_music_stream = SeekMusicStream,
        .set_music_volume = SetMusicVolume,
        .set_music_pitch = SetMusicPitch,
        .set_music_pan = SetMusicPan,
        .get_music_time_length = GetMusicTimeLength,
        .get_music_time_played = GetMusicTimePlayed,
        .load_audio_stream = LoadAudioStream,
        .is_audio_stream_valid = IsAudioStreamValid,
        .unload_audio_stream = UnloadAudioStream,
        .update_audio_stream = UpdateAudioStream,
        .is_audio_stream_processed = IsAudioStreamProcessed,
        .play_audio_stream = PlayAudioStream,
        .pause_audio_stream = PauseAudioStream,
        .resume_audio_stream = ResumeAudioStream,
        .is_audio_stream_playing = IsAudioStreamPlaying,
        .stop_audio_stream = StopAudioStream,
        .set_audio_stream_volume = SetAudioStreamVolume,
        .set_audio_stream_pitch = SetAudioStreamPitch,
        .set_audio_stream_pan = SetAudioStreamPan,
        .set_audio_stream_buffer_size_default = SetAudioStreamBufferSizeDefault,
        .set_audio_stream_callback = SetAudioStreamCallback,
        .attach_audio_stream_processor = AttachAudioStreamProcessor,
        .detach_audio_stream_processor = DetachAudioStreamProcessor,
        .attach_audio_mixed_processor = AttachAudioMixedProcessor,
        .detach_audio_mixed_processor = DetachAudioMixedProcessor,
    };
    return &api;
}

#ifdef HOT_RELOAD
#define InitWindow(width, height, title) rl->init_window(width, height, title)
#define CloseWindow() rl->close_window()
#define WindowShouldClose() rl->window_should_close()
#define IsWindowReady() rl->is_window_ready()
#define IsWindowFullscreen() rl->is_window_fullscreen()
#define IsWindowHidden() rl->is_window_hidden()
#define IsWindowMinimized() rl->is_window_minimized()
#define IsWindowMaximized() rl->is_window_maximized()
#define IsWindowFocused() rl->is_window_focused()
#define IsWindowResized() rl->is_window_resized()
#define IsWindowState(flag) rl->is_window_state(flag)
#define SetWindowState(flags) rl->set_window_state(flags)
#define ClearWindowState(flags) rl->clear_window_state(flags)
#define ToggleFullscreen() rl->toggle_fullscreen()
#define ToggleBorderlessWindowed() rl->toggle_borderless_windowed()
#define MaximizeWindow() rl->maximize_window()
#define MinimizeWindow() rl->minimize_window()
#define RestoreWindow() rl->restore_window()
#define SetWindowIcon(image) rl->set_window_icon(image)
#define SetWindowIcons(images, count) rl->set_window_icons(images, count)
#define SetWindowTitle(title) rl->set_window_title(title)
#define SetWindowPosition(x, y) rl->set_window_position(x, y)
#define SetWindowMonitor(monitor) rl->set_window_monitor(monitor)
#define SetWindowMinSize(width, height) rl->set_window_min_size(width, height)
#define SetWindowMaxSize(width, height) rl->set_window_max_size(width, height)
#define SetWindowSize(width, height) rl->set_window_size(width, height)
#define SetWindowOpacity(opacity) rl->set_window_opacity(opacity)
#define SetWindowFocused() rl->set_window_focused()
#define GetWindowHandle() rl->get_window_handle()
#define GetScreenWidth() rl->get_screen_width()
#define GetScreenHeight() rl->get_screen_height()
#define GetRenderWidth() rl->get_render_width()
#define GetRenderHeight() rl->get_render_height()
#define GetMonitorCount() rl->get_monitor_count()
#define GetCurrentMonitor() rl->get_current_monitor()
#define GetMonitorPosition(monitor) rl->get_monitor_position(monitor)
#define GetMonitorWidth(monitor) rl->get_monitor_width(monitor)
#define GetMonitorHeight(monitor) rl->get_monitor_height(monitor)
#define GetMonitorPhysicalWidth(monitor) rl->get_monitor_physical_width(monitor)
#define GetMonitorPhysicalHeight(monitor) rl->get_monitor_physical_height(monitor)
#define GetMonitorRefreshRate(monitor) rl->get_monitor_refresh_rate(monitor)
#define GetWindowPosition() rl->get_window_position()
#define GetWindowScaleDPI() rl->get_window_scale_dpi()
#define GetMonitorName(monitor) rl->get_monitor_name(monitor)
#define SetClipboardText(text) rl->set_clipboard_text(text)
#define GetClipboardText() rl->get_clipboard_text()
#define GetClipboardImage() rl->get_clipboard_image()
#define EnableEventWaiting() rl->enable_event_waiting()
#define DisableEventWaiting() rl->disable_event_waiting()
#define ShowCursor() rl->show_cursor()
#define HideCursor() rl->hide_cursor()
#define IsCursorHidden() rl->is_cursor_hidden()
#define EnableCursor() rl->enable_cursor()
#define DisableCursor() rl->disable_cursor()
#define IsCursorOnScreen() rl->is_cursor_on_screen()
#define ClearBackground(color) rl->clear_background(color)
#define BeginDrawing() rl->begin_drawing()
#define EndDrawing() rl->end_drawing()
#define BeginMode2D(camera) rl->begin_mode2_d(camera)
#define EndMode2D() rl->end_mode2_d()
#define BeginMode3D(camera) rl->begin_mode3_d(camera)
#define EndMode3D() rl->end_mode3_d()
#define BeginTextureMode(target) rl->begin_texture_mode(target)
#define EndTextureMode() rl->end_texture_mode()
#define BeginShaderMode(shader) rl->begin_shader_mode(shader)
#define EndShaderMode() rl->end_shader_mode()
#define BeginBlendMode(mode) rl->begin_blend_mode(mode)
#define EndBlendMode() rl->end_blend_mode()
#define BeginScissorMode(x, y, width, height) rl->begin_scissor_mode(x, y, width, height)
#define EndScissorMode() rl->end_scissor_mode()
#define BeginVrStereoMode(config) rl->begin_vr_stereo_mode(config)
#define EndVrStereoMode() rl->end_vr_stereo_mode()
#define LoadVrStereoConfig(device) rl->load_vr_stereo_config(device)
#define UnloadVrStereoConfig(config) rl->unload_vr_stereo_config(config)
#define LoadShader(vsFileName, fsFileName) rl->load_shader(vsFileName, fsFileName)
#define LoadShaderFromMemory(vsCode, fsCode) rl->load_shader_from_memory(vsCode, fsCode)
#define IsShaderValid(shader) rl->is_shader_valid(shader)
#define GetShaderLocation(shader, uniformName) rl->get_shader_location(shader, uniformName)
#define GetShaderLocationAttrib(shader, attribName) rl->get_shader_location_attrib(shader, attribName)
#define SetShaderValue(shader, locIndex, value, uniformType) rl->set_shader_value(shader, locIndex, value, uniformType)
#define SetShaderValueV(shader, locIndex, value, uniformType, count) rl->set_shader_value_v(shader, locIndex, value, uniformType, count)
#define SetShaderValueMatrix(shader, locIndex, mat) rl->set_shader_value_matrix(shader, locIndex, mat)
#define SetShaderValueTexture(shader, locIndex, texture) rl->set_shader_value_texture(shader, locIndex, texture)
#define UnloadShader(shader) rl->unload_shader(shader)
#define GetScreenToWorldRay(position, camera) rl->get_screen_to_world_ray(position, camera)
#define GetScreenToWorldRayEx(position, camera, width, height) rl->get_screen_to_world_ray_ex(position, camera, width, height)
#define GetWorldToScreen(position, camera) rl->get_world_to_screen(position, camera)
#define GetWorldToScreenEx(position, camera, width, height) rl->get_world_to_screen_ex(position, camera, width, height)
#define GetWorldToScreen2D(position, camera) rl->get_world_to_screen2_d(position, camera)
#define GetScreenToWorld2D(position, camera) rl->get_screen_to_world2_d(position, camera)
#define GetCameraMatrix(camera) rl->get_camera_matrix(camera)
#define GetCameraMatrix2D(camera) rl->get_camera_matrix2_d(camera)
#define SetTargetFPS(fps) rl->set_target_fps(fps)
#define GetFrameTime() rl->get_frame_time()
#define GetTime() rl->get_time()
#define GetFPS() rl->get_fps()
#define SwapScreenBuffer() rl->swap_screen_buffer()
#define PollInputEvents() rl->poll_input_events()
#define WaitTime(seconds) rl->wait_time(seconds)
#define SetRandomSeed(seed) rl->set_random_seed(seed)
#define GetRandomValue(min, max) rl->get_random_value(min, max)
#define LoadRandomSequence(count, min, max) rl->load_random_sequence(count, min, max)
#define UnloadRandomSequence(sequence) rl->unload_random_sequence(sequence)
#define TakeScreenshot(fileName) rl->take_screenshot(fileName)
#define SetConfigFlags(flags) rl->set_config_flags(flags)
#define OpenURL(url) rl->open_url(url)
#define TraceLog(logLevel, text, ...) rl->trace_log(logLevel, text, __VA_ARGS__)
#define SetTraceLogLevel(logLevel) rl->set_trace_log_level(logLevel)
#define MemAlloc(size) rl->mem_alloc(size)
#define MemRealloc(ptr, size) rl->mem_realloc(ptr, size)
#define MemFree(ptr) rl->mem_free(ptr)
#define SetTraceLogCallback(callback) rl->set_trace_log_callback(callback)
#define SetLoadFileDataCallback(callback) rl->set_load_file_data_callback(callback)
#define SetSaveFileDataCallback(callback) rl->set_save_file_data_callback(callback)
#define SetLoadFileTextCallback(callback) rl->set_load_file_text_callback(callback)
#define SetSaveFileTextCallback(callback) rl->set_save_file_text_callback(callback)
#define LoadFileData(fileName, dataSize) rl->load_file_data(fileName, dataSize)
#define UnloadFileData(data) rl->unload_file_data(data)
#define SaveFileData(fileName, data, dataSize) rl->save_file_data(fileName, data, dataSize)
#define ExportDataAsCode(data, dataSize, fileName) rl->export_data_as_code(data, dataSize, fileName)
#define LoadFileText(fileName) rl->load_file_text(fileName)
#define UnloadFileText(text) rl->unload_file_text(text)
#define SaveFileText(fileName, text) rl->save_file_text(fileName, text)
#define FileExists(fileName) rl->file_exists(fileName)
#define DirectoryExists(dirPath) rl->directory_exists(dirPath)
#define IsFileExtension(fileName, ext) rl->is_file_extension(fileName, ext)
#define GetFileLength(fileName) rl->get_file_length(fileName)
#define GetFileExtension(fileName) rl->get_file_extension(fileName)
#define GetFileName(filePath) rl->get_file_name(filePath)
#define GetFileNameWithoutExt(filePath) rl->get_file_name_without_ext(filePath)
#define GetDirectoryPath(filePath) rl->get_directory_path(filePath)
#define GetPrevDirectoryPath(dirPath) rl->get_prev_directory_path(dirPath)
#define GetWorkingDirectory() rl->get_working_directory()
#define GetApplicationDirectory() rl->get_application_directory()
#define MakeDirectory(dirPath) rl->make_directory(dirPath)
#define ChangeDirectory(dir) rl->change_directory(dir)
#define IsPathFile(path) rl->is_path_file(path)
#define IsFileNameValid(fileName) rl->is_file_name_valid(fileName)
#define LoadDirectoryFiles(dirPath) rl->load_directory_files(dirPath)
#define LoadDirectoryFilesEx(basePath, filter, scanSubdirs) rl->load_directory_files_ex(basePath, filter, scanSubdirs)
#define UnloadDirectoryFiles(files) rl->unload_directory_files(files)
#define IsFileDropped() rl->is_file_dropped()
#define LoadDroppedFiles() rl->load_dropped_files()
#define UnloadDroppedFiles(files) rl->unload_dropped_files(files)
#define GetFileModTime(fileName) rl->get_file_mod_time(fileName)
#define CompressData(data, dataSize, compDataSize) rl->compress_data(data, dataSize, compDataSize)
#define DecompressData(compData, compDataSize, dataSize) rl->decompress_data(compData, compDataSize, dataSize)
#define EncodeDataBase64(data, dataSize, outputSize) rl->encode_data_base64(data, dataSize, outputSize)
#define DecodeDataBase64(data, outputSize) rl->decode_data_base64(data, outputSize)
#define ComputeCRC32(data, dataSize) rl->compute_crc32(data, dataSize)
#define ComputeMD5(data, dataSize) rl->compute_md5(data, dataSize)
#define ComputeSHA1(data, dataSize) rl->compute_sha1(data, dataSize)
#define LoadAutomationEventList(fileName) rl->load_automation_event_list(fileName)
#define UnloadAutomationEventList(list) rl->unload_automation_event_list(list)
#define ExportAutomationEventList(list, fileName) rl->export_automation_event_list(list, fileName)
#define SetAutomationEventList(list) rl->set_automation_event_list(list)
#define SetAutomationEventBaseFrame(frame) rl->set_automation_event_base_frame(frame)
#define StartAutomationEventRecording() rl->start_automation_event_recording()
#define StopAutomationEventRecording() rl->stop_automation_event_recording()
#define PlayAutomationEvent(event) rl->play_automation_event(event)
#define IsKeyPressed(key) rl->is_key_pressed(key)
#define IsKeyPressedRepeat(key) rl->is_key_pressed_repeat(key)
#define IsKeyDown(key) rl->is_key_down(key)
#define IsKeyReleased(key) rl->is_key_released(key)
#define IsKeyUp(key) rl->is_key_up(key)
#define GetKeyPressed() rl->get_key_pressed()
#define GetCharPressed() rl->get_char_pressed()
#define SetExitKey(key) rl->set_exit_key(key)
#define IsGamepadAvailable(gamepad) rl->is_gamepad_available(gamepad)
#define GetGamepadName(gamepad) rl->get_gamepad_name(gamepad)
#define IsGamepadButtonPressed(gamepad, button) rl->is_gamepad_button_pressed(gamepad, button)
#define IsGamepadButtonDown(gamepad, button) rl->is_gamepad_button_down(gamepad, button)
#define IsGamepadButtonReleased(gamepad, button) rl->is_gamepad_button_released(gamepad, button)
#define IsGamepadButtonUp(gamepad, button) rl->is_gamepad_button_up(gamepad, button)
#define GetGamepadButtonPressed() rl->get_gamepad_button_pressed()
#define GetGamepadAxisCount(gamepad) rl->get_gamepad_axis_count(gamepad)
#define GetGamepadAxisMovement(gamepad, axis) rl->get_gamepad_axis_movement(gamepad, axis)
#define SetGamepadMappings(mappings) rl->set_gamepad_mappings(mappings)
#define SetGamepadVibration(gamepad, leftMotor, rightMotor, duration) rl->set_gamepad_vibration(gamepad, leftMotor, rightMotor, duration)
#define IsMouseButtonPressed(button) rl->is_mouse_button_pressed(button)
#define IsMouseButtonDown(button) rl->is_mouse_button_down(button)
#define IsMouseButtonReleased(button) rl->is_mouse_button_released(button)
#define IsMouseButtonUp(button) rl->is_mouse_button_up(button)
#define GetMouseX() rl->get_mouse_x()
#define GetMouseY() rl->get_mouse_y()
#define GetMousePosition() rl->get_mouse_position()
#define GetMouseDelta() rl->get_mouse_delta()
#define SetMousePosition(x, y) rl->set_mouse_position(x, y)
#define SetMouseOffset(offsetX, offsetY) rl->set_mouse_offset(offsetX, offsetY)
#define SetMouseScale(scaleX, scaleY) rl->set_mouse_scale(scaleX, scaleY)
#define GetMouseWheelMove() rl->get_mouse_wheel_move()
#define GetMouseWheelMoveV() rl->get_mouse_wheel_move_v()
#define SetMouseCursor(cursor) rl->set_mouse_cursor(cursor)
#define GetTouchX() rl->get_touch_x()
#define GetTouchY() rl->get_touch_y()
#define GetTouchPosition(index) rl->get_touch_position(index)
#define GetTouchPointId(index) rl->get_touch_point_id(index)
#define GetTouchPointCount() rl->get_touch_point_count()
#define SetGesturesEnabled(flags) rl->set_gestures_enabled(flags)
#define IsGestureDetected(gesture) rl->is_gesture_detected(gesture)
#define GetGestureDetected() rl->get_gesture_detected()
#define GetGestureHoldDuration() rl->get_gesture_hold_duration()
#define GetGestureDragVector() rl->get_gesture_drag_vector()
#define GetGestureDragAngle() rl->get_gesture_drag_angle()
#define GetGesturePinchVector() rl->get_gesture_pinch_vector()
#define GetGesturePinchAngle() rl->get_gesture_pinch_angle()
#define UpdateCamera(camera, mode) rl->update_camera(camera, mode)
#define UpdateCameraPro(camera, movement, rotation, zoom) rl->update_camera_pro(camera, movement, rotation, zoom)
#define SetShapesTexture(texture, source) rl->set_shapes_texture(texture, source)
#define GetShapesTexture() rl->get_shapes_texture()
#define GetShapesTextureRectangle() rl->get_shapes_texture_rectangle()
#define DrawPixel(posX, posY, color) rl->draw_pixel(posX, posY, color)
#define DrawPixelV(position, color) rl->draw_pixel_v(position, color)
#define DrawLine(startPosX, startPosY, endPosX, endPosY, color) rl->draw_line(startPosX, startPosY, endPosX, endPosY, color)
#define DrawLineV(startPos, endPos, color) rl->draw_line_v(startPos, endPos, color)
#define DrawLineEx(startPos, endPos, thick, color) rl->draw_line_ex(startPos, endPos, thick, color)
#define DrawLineStrip(points, pointCount, color) rl->draw_line_strip(points, pointCount, color)
#define DrawLineBezier(startPos, endPos, thick, color) rl->draw_line_bezier(startPos, endPos, thick, color)
#define DrawCircle(centerX, centerY, radius, color) rl->draw_circle(centerX, centerY, radius, color)
#define DrawCircleSector(center, radius, startAngle, endAngle, segments, color) rl->draw_circle_sector(center, radius, startAngle, endAngle, segments, color)
#define DrawCircleSectorLines(center, radius, startAngle, endAngle, segments, color) rl->draw_circle_sector_lines(center, radius, startAngle, endAngle, segments, color)
#define DrawCircleGradient(centerX, centerY, radius, inner, outer) rl->draw_circle_gradient(centerX, centerY, radius, inner, outer)
#define DrawCircleV(center, radius, color) rl->draw_circle_v(center, radius, color)
#define DrawCircleLines(centerX, centerY, radius, color) rl->draw_circle_lines(centerX, centerY, radius, color)
#define DrawCircleLinesV(center, radius, color) rl->draw_circle_lines_v(center, radius, color)
#define DrawEllipse(centerX, centerY, radiusH, radiusV, color) rl->draw_ellipse(centerX, centerY, radiusH, radiusV, color)
#define DrawEllipseLines(centerX, centerY, radiusH, radiusV, color) rl->draw_ellipse_lines(centerX, centerY, radiusH, radiusV, color)
#define DrawRing(center, innerRadius, outerRadius, startAngle, endAngle, segments, color) rl->draw_ring(center, innerRadius, outerRadius, startAngle, endAngle, segments, color)
#define DrawRingLines(center, innerRadius, outerRadius, startAngle, endAngle, segments, color) rl->draw_ring_lines(center, innerRadius, outerRadius, startAngle, endAngle, segments, color)
#define DrawRectangle(posX, posY, width, height, color) rl->draw_rectangle(posX, posY, width, height, color)
#define DrawRectangleV(position, size, color) rl->draw_rectangle_v(position, size, color)
#define DrawRectangleRec(rec, color) rl->draw_rectangle_rec(rec, color)
#define DrawRectanglePro(rec, origin, rotation, color) rl->draw_rectangle_pro(rec, origin, rotation, color)
#define DrawRectangleGradientV(posX, posY, width, height, top, bottom) rl->draw_rectangle_gradient_v(posX, posY, width, height, top, bottom)
#define DrawRectangleGradientH(posX, posY, width, height, left, right) rl->draw_rectangle_gradient_h(posX, posY, width, height, left, right)
#define DrawRectangleGradientEx(rec, topLeft, bottomLeft, topRight, bottomRight) rl->draw_rectangle_gradient_ex(rec, topLeft, bottomLeft, topRight, bottomRight)
#define DrawRectangleLines(posX, posY, width, height, color) rl->draw_rectangle_lines(posX, posY, width, height, color)
#define DrawRectangleLinesEx(rec, lineThick, color) rl->draw_rectangle_lines_ex(rec, lineThick, color)
#define DrawRectangleRounded(rec, roundness, segments, color) rl->draw_rectangle_rounded(rec, roundness, segments, color)
#define DrawRectangleRoundedLines(rec, roundness, segments, color) rl->draw_rectangle_rounded_lines(rec, roundness, segments, color)
#define DrawRectangleRoundedLinesEx(rec, roundness, segments, lineThick, color) rl->draw_rectangle_rounded_lines_ex(rec, roundness, segments, lineThick, color)
#define DrawTriangle(v1, v2, v3, color) rl->draw_triangle(v1, v2, v3, color)
#define DrawTriangleLines(v1, v2, v3, color) rl->draw_triangle_lines(v1, v2, v3, color)
#define DrawTriangleFan(points, pointCount, color) rl->draw_triangle_fan(points, pointCount, color)
#define DrawTriangleStrip(points, pointCount, color) rl->draw_triangle_strip(points, pointCount, color)
#define DrawPoly(center, sides, radius, rotation, color) rl->draw_poly(center, sides, radius, rotation, color)
#define DrawPolyLines(center, sides, radius, rotation, color) rl->draw_poly_lines(center, sides, radius, rotation, color)
#define DrawPolyLinesEx(center, sides, radius, rotation, lineThick, color) rl->draw_poly_lines_ex(center, sides, radius, rotation, lineThick, color)
#define DrawSplineLinear(points, pointCount, thick, color) rl->draw_spline_linear(points, pointCount, thick, color)
#define DrawSplineBasis(points, pointCount, thick, color) rl->draw_spline_basis(points, pointCount, thick, color)
#define DrawSplineCatmullRom(points, pointCount, thick, color) rl->draw_spline_catmull_rom(points, pointCount, thick, color)
#define DrawSplineBezierQuadratic(points, pointCount, thick, color) rl->draw_spline_bezier_quadratic(points, pointCount, thick, color)
#define DrawSplineBezierCubic(points, pointCount, thick, color) rl->draw_spline_bezier_cubic(points, pointCount, thick, color)
#define DrawSplineSegmentLinear(p1, p2, thick, color) rl->draw_spline_segment_linear(p1, p2, thick, color)
#define DrawSplineSegmentBasis(p1, p2, p3, p4, thick, color) rl->draw_spline_segment_basis(p1, p2, p3, p4, thick, color)
#define DrawSplineSegmentCatmullRom(p1, p2, p3, p4, thick, color) rl->draw_spline_segment_catmull_rom(p1, p2, p3, p4, thick, color)
#define DrawSplineSegmentBezierQuadratic(p1, c2, p3, thick, color) rl->draw_spline_segment_bezier_quadratic(p1, c2, p3, thick, color)
#define DrawSplineSegmentBezierCubic(p1, c2, c3, p4, thick, color) rl->draw_spline_segment_bezier_cubic(p1, c2, c3, p4, thick, color)
#define GetSplinePointLinear(startPos, endPos, t) rl->get_spline_point_linear(startPos, endPos, t)
#define GetSplinePointBasis(p1, p2, p3, p4, t) rl->get_spline_point_basis(p1, p2, p3, p4, t)
#define GetSplinePointCatmullRom(p1, p2, p3, p4, t) rl->get_spline_point_catmull_rom(p1, p2, p3, p4, t)
#define GetSplinePointBezierQuad(p1, c2, p3, t) rl->get_spline_point_bezier_quad(p1, c2, p3, t)
#define GetSplinePointBezierCubic(p1, c2, c3, p4, t) rl->get_spline_point_bezier_cubic(p1, c2, c3, p4, t)
#define CheckCollisionRecs(rec1, rec2) rl->check_collision_recs(rec1, rec2)
#define CheckCollisionCircles(center1, radius1, center2, radius2) rl->check_collision_circles(center1, radius1, center2, radius2)
#define CheckCollisionCircleRec(center, radius, rec) rl->check_collision_circle_rec(center, radius, rec)
#define CheckCollisionCircleLine(center, radius, p1, p2) rl->check_collision_circle_line(center, radius, p1, p2)
#define CheckCollisionPointRec(point, rec) rl->check_collision_point_rec(point, rec)
#define CheckCollisionPointCircle(point, center, radius) rl->check_collision_point_circle(point, center, radius)
#define CheckCollisionPointTriangle(point, p1, p2, p3) rl->check_collision_point_triangle(point, p1, p2, p3)
#define CheckCollisionPointLine(point, p1, p2, threshold) rl->check_collision_point_line(point, p1, p2, threshold)
#define CheckCollisionPointPoly(point, points, pointCount) rl->check_collision_point_poly(point, points, pointCount)
#define CheckCollisionLines(startPos1, endPos1, startPos2, endPos2, collisionPoint) rl->check_collision_lines(startPos1, endPos1, startPos2, endPos2, collisionPoint)
#define GetCollisionRec(rec1, rec2) rl->get_collision_rec(rec1, rec2)
#define LoadImage(fileName) rl->load_image(fileName)
#define LoadImageRaw(fileName, width, height, format, headerSize) rl->load_image_raw(fileName, width, height, format, headerSize)
#define LoadImageAnim(fileName, frames) rl->load_image_anim(fileName, frames)
#define LoadImageAnimFromMemory(fileType, fileData, dataSize, frames) rl->load_image_anim_from_memory(fileType, fileData, dataSize, frames)
#define LoadImageFromMemory(fileType, fileData, dataSize) rl->load_image_from_memory(fileType, fileData, dataSize)
#define LoadImageFromTexture(texture) rl->load_image_from_texture(texture)
#define LoadImageFromScreen() rl->load_image_from_screen()
#define IsImageValid(image) rl->is_image_valid(image)
#define UnloadImage(image) rl->unload_image(image)
#define ExportImage(image, fileName) rl->export_image(image, fileName)
#define ExportImageToMemory(image, fileType, fileSize) rl->export_image_to_memory(image, fileType, fileSize)
#define ExportImageAsCode(image, fileName) rl->export_image_as_code(image, fileName)
#define GenImageColor(width, height, color) rl->gen_image_color(width, height, color)
#define GenImageGradientLinear(width, height, direction, start, end) rl->gen_image_gradient_linear(width, height, direction, start, end)
#define GenImageGradientRadial(width, height, density, inner, outer) rl->gen_image_gradient_radial(width, height, density, inner, outer)
#define GenImageGradientSquare(width, height, density, inner, outer) rl->gen_image_gradient_square(width, height, density, inner, outer)
#define GenImageChecked(width, height, checksX, checksY, col1, col2) rl->gen_image_checked(width, height, checksX, checksY, col1, col2)
#define GenImageWhiteNoise(width, height, factor) rl->gen_image_white_noise(width, height, factor)
#define GenImagePerlinNoise(width, height, offsetX, offsetY, scale) rl->gen_image_perlin_noise(width, height, offsetX, offsetY, scale)
#define GenImageCellular(width, height, tileSize) rl->gen_image_cellular(width, height, tileSize)
#define GenImageText(width, height, text) rl->gen_image_text(width, height, text)
#define ImageCopy(image) rl->image_copy(image)
#define ImageFromImage(image, rec) rl->image_from_image(image, rec)
#define ImageFromChannel(image, selectedChannel) rl->image_from_channel(image, selectedChannel)
#define ImageText(text, fontSize, color) rl->image_text(text, fontSize, color)
#define ImageTextEx(font, text, fontSize, spacing, tint) rl->image_text_ex(font, text, fontSize, spacing, tint)
#define ImageFormat(image, newFormat) rl->image_format(image, newFormat)
#define ImageToPOT(image, fill) rl->image_to_pot(image, fill)
#define ImageCrop(image, crop) rl->image_crop(image, crop)
#define ImageAlphaCrop(image, threshold) rl->image_alpha_crop(image, threshold)
#define ImageAlphaClear(image, color, threshold) rl->image_alpha_clear(image, color, threshold)
#define ImageAlphaMask(image, alphaMask) rl->image_alpha_mask(image, alphaMask)
#define ImageAlphaPremultiply(image) rl->image_alpha_premultiply(image)
#define ImageBlurGaussian(image, blurSize) rl->image_blur_gaussian(image, blurSize)
#define ImageKernelConvolution(image, kernel, kernelSize) rl->image_kernel_convolution(image, kernel, kernelSize)
#define ImageResize(image, newWidth, newHeight) rl->image_resize(image, newWidth, newHeight)
#define ImageResizeNN(image, newWidth, newHeight) rl->image_resize_nn(image, newWidth, newHeight)
#define ImageResizeCanvas(image, newWidth, newHeight, offsetX, offsetY, fill) rl->image_resize_canvas(image, newWidth, newHeight, offsetX, offsetY, fill)
#define ImageMipmaps(image) rl->image_mipmaps(image)
#define ImageDither(image, rBpp, gBpp, bBpp, aBpp) rl->image_dither(image, rBpp, gBpp, bBpp, aBpp)
#define ImageFlipVertical(image) rl->image_flip_vertical(image)
#define ImageFlipHorizontal(image) rl->image_flip_horizontal(image)
#define ImageRotate(image, degrees) rl->image_rotate(image, degrees)
#define ImageRotateCW(image) rl->image_rotate_cw(image)
#define ImageRotateCCW(image) rl->image_rotate_ccw(image)
#define ImageColorTint(image, color) rl->image_color_tint(image, color)
#define ImageColorInvert(image) rl->image_color_invert(image)
#define ImageColorGrayscale(image) rl->image_color_grayscale(image)
#define ImageColorContrast(image, contrast) rl->image_color_contrast(image, contrast)
#define ImageColorBrightness(image, brightness) rl->image_color_brightness(image, brightness)
#define ImageColorReplace(image, color, replace) rl->image_color_replace(image, color, replace)
#define LoadImageColors(image) rl->load_image_colors(image)
#define LoadImagePalette(image, maxPaletteSize, colorCount) rl->load_image_palette(image, maxPaletteSize, colorCount)
#define UnloadImageColors(colors) rl->unload_image_colors(colors)
#define UnloadImagePalette(colors) rl->unload_image_palette(colors)
#define GetImageAlphaBorder(image, threshold) rl->get_image_alpha_border(image, threshold)
#define GetImageColor(image, x, y) rl->get_image_color(image, x, y)
#define ImageClearBackground(dst, color) rl->image_clear_background(dst, color)
#define ImageDrawPixel(dst, posX, posY, color) rl->image_draw_pixel(dst, posX, posY, color)
#define ImageDrawPixelV(dst, position, color) rl->image_draw_pixel_v(dst, position, color)
#define ImageDrawLine(dst, startPosX, startPosY, endPosX, endPosY, color) rl->image_draw_line(dst, startPosX, startPosY, endPosX, endPosY, color)
#define ImageDrawLineV(dst, start, end, color) rl->image_draw_line_v(dst, start, end, color)
#define ImageDrawLineEx(dst, start, end, thick, color) rl->image_draw_line_ex(dst, start, end, thick, color)
#define ImageDrawCircle(dst, centerX, centerY, radius, color) rl->image_draw_circle(dst, centerX, centerY, radius, color)
#define ImageDrawCircleV(dst, center, radius, color) rl->image_draw_circle_v(dst, center, radius, color)
#define ImageDrawCircleLines(dst, centerX, centerY, radius, color) rl->image_draw_circle_lines(dst, centerX, centerY, radius, color)
#define ImageDrawCircleLinesV(dst, center, radius, color) rl->image_draw_circle_lines_v(dst, center, radius, color)
#define ImageDrawRectangle(dst, posX, posY, width, height, color) rl->image_draw_rectangle(dst, posX, posY, width, height, color)
#define ImageDrawRectangleV(dst, position, size, color) rl->image_draw_rectangle_v(dst, position, size, color)
#define ImageDrawRectangleRec(dst, rec, color) rl->image_draw_rectangle_rec(dst, rec, color)
#define ImageDrawRectangleLines(dst, rec, thick, color) rl->image_draw_rectangle_lines(dst, rec, thick, color)
#define ImageDrawTriangle(dst, v1, v2, v3, color) rl->image_draw_triangle(dst, v1, v2, v3, color)
#define ImageDrawTriangleEx(dst, v1, v2, v3, c1, c2, c3) rl->image_draw_triangle_ex(dst, v1, v2, v3, c1, c2, c3)
#define ImageDrawTriangleLines(dst, v1, v2, v3, color) rl->image_draw_triangle_lines(dst, v1, v2, v3, color)
#define ImageDrawTriangleFan(dst, points, pointCount, color) rl->image_draw_triangle_fan(dst, points, pointCount, color)
#define ImageDrawTriangleStrip(dst, points, pointCount, color) rl->image_draw_triangle_strip(dst, points, pointCount, color)
#define ImageDraw(dst, src, srcRec, dstRec, tint) rl->image_draw(dst, src, srcRec, dstRec, tint)
#define ImageDrawText(dst, text, posX, posY, fontSize, color) rl->image_draw_text(dst, text, posX, posY, fontSize, color)
#define ImageDrawTextEx(dst, font, text, position, fontSize, spacing, tint) rl->image_draw_text_ex(dst, font, text, position, fontSize, spacing, tint)
#define LoadTexture(fileName) rl->load_texture(fileName)
#define LoadTextureFromImage(image) rl->load_texture_from_image(image)
#define LoadTextureCubemap(image, layout) rl->load_texture_cubemap(image, layout)
#define LoadRenderTexture(width, height) rl->load_render_texture(width, height)
#define IsTextureValid(texture) rl->is_texture_valid(texture)
#define UnloadTexture(texture) rl->unload_texture(texture)
#define IsRenderTextureValid(target) rl->is_render_texture_valid(target)
#define UnloadRenderTexture(target) rl->unload_render_texture(target)
#define UpdateTexture(texture, pixels) rl->update_texture(texture, pixels)
#define UpdateTextureRec(texture, rec, pixels) rl->update_texture_rec(texture, rec, pixels)
#define GenTextureMipmaps(texture) rl->gen_texture_mipmaps(texture)
#define SetTextureFilter(texture, filter) rl->set_texture_filter(texture, filter)
#define SetTextureWrap(texture, wrap) rl->set_texture_wrap(texture, wrap)
#define DrawTexture(texture, posX, posY, tint) rl->draw_texture(texture, posX, posY, tint)
#define DrawTextureV(texture, position, tint) rl->draw_texture_v(texture, position, tint)
#define DrawTextureEx(texture, position, rotation, scale, tint) rl->draw_texture_ex(texture, position, rotation, scale, tint)
#define DrawTextureRec(texture, source, position, tint) rl->draw_texture_rec(texture, source, position, tint)
#define DrawTexturePro(texture, source, dest, origin, rotation, tint) rl->draw_texture_pro(texture, source, dest, origin, rotation, tint)
#define DrawTextureNPatch(texture, nPatchInfo, dest, origin, rotation, tint) rl->draw_texture_n_patch(texture, nPatchInfo, dest, origin, rotation, tint)
#define ColorIsEqual(col1, col2) rl->color_is_equal(col1, col2)
#define Fade(color, alpha) rl->fade(color, alpha)
#define ColorToInt(color) rl->color_to_int(color)
#define ColorNormalize(color) rl->color_normalize(color)
#define ColorFromNormalized(normalized) rl->color_from_normalized(normalized)
#define ColorToHSV(color) rl->color_to_hsv(color)
#define ColorFromHSV(hue, saturation, value) rl->color_from_hsv(hue, saturation, value)
#define ColorTint(color, tint) rl->color_tint(color, tint)
#define ColorBrightness(color, factor) rl->color_brightness(color, factor)
#define ColorContrast(color, contrast) rl->color_contrast(color, contrast)
#define ColorAlpha(color, alpha) rl->color_alpha(color, alpha)
#define ColorAlphaBlend(dst, src, tint) rl->color_alpha_blend(dst, src, tint)
#define ColorLerp(color1, color2, factor) rl->color_lerp(color1, color2, factor)
#define GetColor(hexValue) rl->get_color(hexValue)
#define GetPixelColor(srcPtr, format) rl->get_pixel_color(srcPtr, format)
#define SetPixelColor(dstPtr, color, format) rl->set_pixel_color(dstPtr, color, format)
#define GetPixelDataSize(width, height, format) rl->get_pixel_data_size(width, height, format)
#define GetFontDefault() rl->get_font_default()
#define LoadFont(fileName) rl->load_font(fileName)
#define LoadFontEx(fileName, fontSize, codepoints, codepointCount) rl->load_font_ex(fileName, fontSize, codepoints, codepointCount)
#define LoadFontFromImage(image, key, firstChar) rl->load_font_from_image(image, key, firstChar)
#define LoadFontFromMemory(fileType, fileData, dataSize, fontSize, codepoints, codepointCount) rl->load_font_from_memory(fileType, fileData, dataSize, fontSize, codepoints, codepointCount)
#define IsFontValid(font) rl->is_font_valid(font)
#define LoadFontData(fileData, dataSize, fontSize, codepoints, codepointCount, type) rl->load_font_data(fileData, dataSize, fontSize, codepoints, codepointCount, type)
#define GenImageFontAtlas(glyphs, glyphRecs, glyphCount, fontSize, padding, packMethod) rl->gen_image_font_atlas(glyphs, glyphRecs, glyphCount, fontSize, padding, packMethod)
#define UnloadFontData(glyphs, glyphCount) rl->unload_font_data(glyphs, glyphCount)
#define UnloadFont(font) rl->unload_font(font)
#define ExportFontAsCode(font, fileName) rl->export_font_as_code(font, fileName)
#define DrawFPS(posX, posY) rl->draw_fps(posX, posY)
#define DrawText(text, posX, posY, fontSize, color) rl->draw_text(text, posX, posY, fontSize, color)
#define DrawTextEx(font, text, position, fontSize, spacing, tint) rl->draw_text_ex(font, text, position, fontSize, spacing, tint)
#define DrawTextPro(font, text, position, origin, rotation, fontSize, spacing, tint) rl->draw_text_pro(font, text, position, origin, rotation, fontSize, spacing, tint)
#define DrawTextCodepoint(font, codepoint, position, fontSize, tint) rl->draw_text_codepoint(font, codepoint, position, fontSize, tint)
#define DrawTextCodepoints(font, codepoints, codepointCount, position, fontSize, spacing, tint) rl->draw_text_codepoints(font, codepoints, codepointCount, position, fontSize, spacing, tint)
#define SetTextLineSpacing(spacing) rl->set_text_line_spacing(spacing)
#define MeasureText(text, fontSize) rl->measure_text(text, fontSize)
#define MeasureTextEx(font, text, fontSize, spacing) rl->measure_text_ex(font, text, fontSize, spacing)
#define GetGlyphIndex(font, codepoint) rl->get_glyph_index(font, codepoint)
#define GetGlyphInfo(font, codepoint) rl->get_glyph_info(font, codepoint)
#define GetGlyphAtlasRec(font, codepoint) rl->get_glyph_atlas_rec(font, codepoint)
#define LoadUTF8(codepoints, length) rl->load_utf8(codepoints, length)
#define UnloadUTF8(text) rl->unload_utf8(text)
#define LoadCodepoints(text, count) rl->load_codepoints(text, count)
#define UnloadCodepoints(codepoints) rl->unload_codepoints(codepoints)
#define GetCodepointCount(text) rl->get_codepoint_count(text)
#define GetCodepoint(text, codepointSize) rl->get_codepoint(text, codepointSize)
#define GetCodepointNext(text, codepointSize) rl->get_codepoint_next(text, codepointSize)
#define GetCodepointPrevious(text, codepointSize) rl->get_codepoint_previous(text, codepointSize)
#define CodepointToUTF8(codepoint, utf8Size) rl->codepoint_to_utf8(codepoint, utf8Size)
#define TextCopy(dst, src) rl->text_copy(dst, src)
#define TextIsEqual(text1, text2) rl->text_is_equal(text1, text2)
#define TextLength(text) rl->text_length(text)
#define TextFormat(text, ...) rl->text_format(text, __VA_ARGS__)
#define TextSubtext(text, position, length) rl->text_subtext(text, position, length)
#define TextReplace(text, replace, by) rl->text_replace(text, replace, by)
#define TextInsert(text, insert, position) rl->text_insert(text, insert, position)
#define TextJoin(textList, count, delimiter) rl->text_join(textList, count, delimiter)
#define TextSplit(text, delimiter, count) rl->text_split(text, delimiter, count)
#define TextAppend(text, append, position) rl->text_append(text, append, position)
#define TextFindIndex(text, find) rl->text_find_index(text, find)
#define TextToUpper(text) rl->text_to_upper(text)
#define TextToLower(text) rl->text_to_lower(text)
#define TextToPascal(text) rl->text_to_pascal(text)
#define TextToSnake(text) rl->text_to_snake(text)
#define TextToCamel(text) rl->text_to_camel(text)
#define TextToInteger(text) rl->text_to_integer(text)
#define TextToFloat(text) rl->text_to_float(text)
#define DrawLine3D(startPos, endPos, color) rl->draw_line3_d(startPos, endPos, color)
#define DrawPoint3D(position, color) rl->draw_point3_d(position, color)
#define DrawCircle3D(center, radius, rotationAxis, rotationAngle, color) rl->draw_circle3_d(center, radius, rotationAxis, rotationAngle, color)
#define DrawTriangle3D(v1, v2, v3, color) rl->draw_triangle3_d(v1, v2, v3, color)
#define DrawTriangleStrip3D(points, pointCount, color) rl->draw_triangle_strip3_d(points, pointCount, color)
#define DrawCube(position, width, height, length, color) rl->draw_cube(position, width, height, length, color)
#define DrawCubeV(position, size, color) rl->draw_cube_v(position, size, color)
#define DrawCubeWires(position, width, height, length, color) rl->draw_cube_wires(position, width, height, length, color)
#define DrawCubeWiresV(position, size, color) rl->draw_cube_wires_v(position, size, color)
#define DrawSphere(centerPos, radius, color) rl->draw_sphere(centerPos, radius, color)
#define DrawSphereEx(centerPos, radius, rings, slices, color) rl->draw_sphere_ex(centerPos, radius, rings, slices, color)
#define DrawSphereWires(centerPos, radius, rings, slices, color) rl->draw_sphere_wires(centerPos, radius, rings, slices, color)
#define DrawCylinder(position, radiusTop, radiusBottom, height, slices, color) rl->draw_cylinder(position, radiusTop, radiusBottom, height, slices, color)
#define DrawCylinderEx(startPos, endPos, startRadius, endRadius, sides, color) rl->draw_cylinder_ex(startPos, endPos, startRadius, endRadius, sides, color)
#define DrawCylinderWires(position, radiusTop, radiusBottom, height, slices, color) rl->draw_cylinder_wires(position, radiusTop, radiusBottom, height, slices, color)
#define DrawCylinderWiresEx(startPos, endPos, startRadius, endRadius, sides, color) rl->draw_cylinder_wires_ex(startPos, endPos, startRadius, endRadius, sides, color)
#define DrawCapsule(startPos, endPos, radius, slices, rings, color) rl->draw_capsule(startPos, endPos, radius, slices, rings, color)
#define DrawCapsuleWires(startPos, endPos, radius, slices, rings, color) rl->draw_capsule_wires(startPos, endPos, radius, slices, rings, color)
#define DrawPlane(centerPos, size, color) rl->draw_plane(centerPos, size, color)
#define DrawRay(ray, color) rl->draw_ray(ray, color)
#define DrawGrid(slices, spacing) rl->draw_grid(slices, spacing)
#define LoadModel(fileName) rl->load_model(fileName)
#define LoadModelFromMesh(mesh) rl->load_model_from_mesh(mesh)
#define IsModelValid(model) rl->is_model_valid(model)
#define UnloadModel(model) rl->unload_model(model)
#define GetModelBoundingBox(model) rl->get_model_bounding_box(model)
#define DrawModel(model, position, scale, tint) rl->draw_model(model, position, scale, tint)
#define DrawModelEx(model, position, rotationAxis, rotationAngle, scale, tint) rl->draw_model_ex(model, position, rotationAxis, rotationAngle, scale, tint)
#define DrawModelWires(model, position, scale, tint) rl->draw_model_wires(model, position, scale, tint)
#define DrawModelWiresEx(model, position, rotationAxis, rotationAngle, scale, tint) rl->draw_model_wires_ex(model, position, rotationAxis, rotationAngle, scale, tint)
#define DrawModelPoints(model, position, scale, tint) rl->draw_model_points(model, position, scale, tint)
#define DrawModelPointsEx(model, position, rotationAxis, rotationAngle, scale, tint) rl->draw_model_points_ex(model, position, rotationAxis, rotationAngle, scale, tint)
#define DrawBoundingBox(box, color) rl->draw_bounding_box(box, color)
#define DrawBillboard(camera, texture, position, scale, tint) rl->draw_billboard(camera, texture, position, scale, tint)
#define DrawBillboardRec(camera, texture, source, position, size, tint) rl->draw_billboard_rec(camera, texture, source, position, size, tint)
#define DrawBillboardPro(camera, texture, source, position, up, size, origin, rotation, tint) rl->draw_billboard_pro(camera, texture, source, position, up, size, origin, rotation, tint)
#define UploadMesh(mesh, dynamic) rl->upload_mesh(mesh, dynamic)
#define UpdateMeshBuffer(mesh, index, data, dataSize, offset) rl->update_mesh_buffer(mesh, index, data, dataSize, offset)
#define UnloadMesh(mesh) rl->unload_mesh(mesh)
#define DrawMesh(mesh, material, transform) rl->draw_mesh(mesh, material, transform)
#define DrawMeshInstanced(mesh, material, transforms, instances) rl->draw_mesh_instanced(mesh, material, transforms, instances)
#define GetMeshBoundingBox(mesh) rl->get_mesh_bounding_box(mesh)
#define GenMeshTangents(mesh) rl->gen_mesh_tangents(mesh)
#define ExportMesh(mesh, fileName) rl->export_mesh(mesh, fileName)
#define ExportMeshAsCode(mesh, fileName) rl->export_mesh_as_code(mesh, fileName)
#define GenMeshPoly(sides, radius) rl->gen_mesh_poly(sides, radius)
#define GenMeshPlane(width, length, resX, resZ) rl->gen_mesh_plane(width, length, resX, resZ)
#define GenMeshCube(width, height, length) rl->gen_mesh_cube(width, height, length)
#define GenMeshSphere(radius, rings, slices) rl->gen_mesh_sphere(radius, rings, slices)
#define GenMeshHemiSphere(radius, rings, slices) rl->gen_mesh_hemi_sphere(radius, rings, slices)
#define GenMeshCylinder(radius, height, slices) rl->gen_mesh_cylinder(radius, height, slices)
#define GenMeshCone(radius, height, slices) rl->gen_mesh_cone(radius, height, slices)
#define GenMeshTorus(radius, size, radSeg, sides) rl->gen_mesh_torus(radius, size, radSeg, sides)
#define GenMeshKnot(radius, size, radSeg, sides) rl->gen_mesh_knot(radius, size, radSeg, sides)
#define GenMeshHeightmap(heightmap, size) rl->gen_mesh_heightmap(heightmap, size)
#define GenMeshCubicmap(cubicmap, cubeSize) rl->gen_mesh_cubicmap(cubicmap, cubeSize)
#define LoadMaterials(fileName, materialCount) rl->load_materials(fileName, materialCount)
#define LoadMaterialDefault() rl->load_material_default()
#define IsMaterialValid(material) rl->is_material_valid(material)
#define UnloadMaterial(material) rl->unload_material(material)
#define SetMaterialTexture(material, mapType, texture) rl->set_material_texture(material, mapType, texture)
#define SetModelMeshMaterial(model, meshId, materialId) rl->set_model_mesh_material(model, meshId, materialId)
#define LoadModelAnimations(fileName, animCount) rl->load_model_animations(fileName, animCount)
#define UpdateModelAnimation(model, anim, frame) rl->update_model_animation(model, anim, frame)
#define UpdateModelAnimationBones(model, anim, frame) rl->update_model_animation_bones(model, anim, frame)
#define UnloadModelAnimation(anim) rl->unload_model_animation(anim)
#define UnloadModelAnimations(animations, animCount) rl->unload_model_animations(animations, animCount)
#define IsModelAnimationValid(model, anim) rl->is_model_animation_valid(model, anim)
#define CheckCollisionSpheres(center1, radius1, center2, radius2) rl->check_collision_spheres(center1, radius1, center2, radius2)
#define CheckCollisionBoxes(box1, box2) rl->check_collision_boxes(box1, box2)
#define CheckCollisionBoxSphere(box, center, radius) rl->check_collision_box_sphere(box, center, radius)
#define GetRayCollisionSphere(ray, center, radius) rl->get_ray_collision_sphere(ray, center, radius)
#define GetRayCollisionBox(ray, box) rl->get_ray_collision_box(ray, box)
#define GetRayCollisionMesh(ray, mesh, transform) rl->get_ray_collision_mesh(ray, mesh, transform)
#define GetRayCollisionTriangle(ray, p1, p2, p3) rl->get_ray_collision_triangle(ray, p1, p2, p3)
#define GetRayCollisionQuad(ray, p1, p2, p3, p4) rl->get_ray_collision_quad(ray, p1, p2, p3, p4)
#define InitAudioDevice() rl->init_audio_device()
#define CloseAudioDevice() rl->close_audio_device()
#define IsAudioDeviceReady() rl->is_audio_device_ready()
#define SetMasterVolume(volume) rl->set_master_volume(volume)
#define GetMasterVolume() rl->get_master_volume()
#define LoadWave(fileName) rl->load_wave(fileName)
#define LoadWaveFromMemory(fileType, fileData, dataSize) rl->load_wave_from_memory(fileType, fileData, dataSize)
#define IsWaveValid(wave) rl->is_wave_valid(wave)
#define LoadSound(fileName) rl->load_sound(fileName)
#define LoadSoundFromWave(wave) rl->load_sound_from_wave(wave)
#define LoadSoundAlias(source) rl->load_sound_alias(source)
#define IsSoundValid(sound) rl->is_sound_valid(sound)
#define UpdateSound(sound, data, sampleCount) rl->update_sound(sound, data, sampleCount)
#define UnloadWave(wave) rl->unload_wave(wave)
#define UnloadSound(sound) rl->unload_sound(sound)
#define UnloadSoundAlias(alias) rl->unload_sound_alias(alias)
#define ExportWave(wave, fileName) rl->export_wave(wave, fileName)
#define ExportWaveAsCode(wave, fileName) rl->export_wave_as_code(wave, fileName)
#define PlaySound(sound) rl->play_sound(sound)
#define StopSound(sound) rl->stop_sound(sound)
#define PauseSound(sound) rl->pause_sound(sound)
#define ResumeSound(sound) rl->resume_sound(sound)
#define IsSoundPlaying(sound) rl->is_sound_playing(sound)
#define SetSoundVolume(sound, volume) rl->set_sound_volume(sound, volume)
#define SetSoundPitch(sound, pitch) rl->set_sound_pitch(sound, pitch)
#define SetSoundPan(sound, pan) rl->set_sound_pan(sound, pan)
#define WaveCopy(wave) rl->wave_copy(wave)
#define WaveCrop(wave, initFrame, finalFrame) rl->wave_crop(wave, initFrame, finalFrame)
#define WaveFormat(wave, sampleRate, sampleSize, channels) rl->wave_format(wave, sampleRate, sampleSize, channels)
#define LoadWaveSamples(wave) rl->load_wave_samples(wave)
#define UnloadWaveSamples(samples) rl->unload_wave_samples(samples)
#define LoadMusicStream(fileName) rl->load_music_stream(fileName)
#define LoadMusicStreamFromMemory(fileType, data, dataSize) rl->load_music_stream_from_memory(fileType, data, dataSize)
#define IsMusicValid(music) rl->is_music_valid(music)
#define UnloadMusicStream(music) rl->unload_music_stream(music)
#define PlayMusicStream(music) rl->play_music_stream(music)
#define IsMusicStreamPlaying(music) rl->is_music_stream_playing(music)
#define UpdateMusicStream(music) rl->update_music_stream(music)
#define StopMusicStream(music) rl->stop_music_stream(music)
#define PauseMusicStream(music) rl->pause_music_stream(music)
#define ResumeMusicStream(music) rl->resume_music_stream(music)
#define SeekMusicStream(music, position) rl->seek_music_stream(music, position)
#define SetMusicVolume(music, volume) rl->set_music_volume(music, volume)
#define SetMusicPitch(music, pitch) rl->set_music_pitch(music, pitch)
#define SetMusicPan(music, pan) rl->set_music_pan(music, pan)
#define GetMusicTimeLength(music) rl->get_music_time_length(music)
#define GetMusicTimePlayed(music) rl->get_music_time_played(music)
#define LoadAudioStream(sampleRate, sampleSize, channels) rl->load_audio_stream(sampleRate, sampleSize, channels)
#define IsAudioStreamValid(stream) rl->is_audio_stream_valid(stream)
#define UnloadAudioStream(stream) rl->unload_audio_stream(stream)
#define UpdateAudioStream(stream, data, frameCount) rl->update_audio_stream(stream, data, frameCount)
#define IsAudioStreamProcessed(stream) rl->is_audio_stream_processed(stream)
#define PlayAudioStream(stream) rl->play_audio_stream(stream)
#define PauseAudioStream(stream) rl->pause_audio_stream(stream)
#define ResumeAudioStream(stream) rl->resume_audio_stream(stream)
#define IsAudioStreamPlaying(stream) rl->is_audio_stream_playing(stream)
#define StopAudioStream(stream) rl->stop_audio_stream(stream)
#define SetAudioStreamVolume(stream, volume) rl->set_audio_stream_volume(stream, volume)
#define SetAudioStreamPitch(stream, pitch) rl->set_audio_stream_pitch(stream, pitch)
#define SetAudioStreamPan(stream, pan) rl->set_audio_stream_pan(stream, pan)
#define SetAudioStreamBufferSizeDefault(size) rl->set_audio_stream_buffer_size_default(size)
#define SetAudioStreamCallback(stream, callback) rl->set_audio_stream_callback(stream, callback)
#define AttachAudioStreamProcessor(stream, processor) rl->attach_audio_stream_processor(stream, processor)
#define DetachAudioStreamProcessor(stream, processor) rl->detach_audio_stream_processor(stream, processor)
#define AttachAudioMixedProcessor(processor) rl->attach_audio_mixed_processor(processor)
#define DetachAudioMixedProcessor(processor) rl->detach_audio_mixed_processor(processor)
#endif

#endif // RAYLIB_API_GEN_H
